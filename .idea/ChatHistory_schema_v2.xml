<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="03752d7c-89c0-4c92-a0b8-b57ad55df3ca" value="{&quot;id&quot;:&quot;03752d7c-89c0-4c92-a0b8-b57ad55df3ca&quot;,&quot;name&quot;:&quot;Renaming Functions&quot;,&quot;timestamp&quot;:1739873226501,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nкак переименовать эти функции?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Ниже пример, как можно переименовать функции. Предположим, мы хотим переименовать:  \n• ConvenientRowOfFABLikeSquareButtons → RenamedRowOfFABLikeSquareButtons  \n• ConvenientFABLikeSquareButton → RenamedFABLikeSquareButton  \n• RowOfConvenientButtonsPrev → RowOfConvenientButtonsPreview  \n• ConvenientFABLikeSquareButtonPreview → FABLikeSquareButtonPreview  \n\nОбратите внимание, что вы можете выбрать любые желаемые названия — приведённые ниже варианты лишь пример того, как это сделать:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\n// ... существующий код ...\n\n@Composable\nfun RenamedRowOfFABLikeSquareButtons(\n    isEnabled: Boolean,\n    onValueChanged: (Float) -\u003e Unit,\n    values: List\u003cFloat\u003e,\n    isRecommended: Float? \u003d null,\n    contentDescriptionForParameter: (Float) -\u003e String\n) {\n    // ... существующий код ...\n    values.forEachIndexed { index, value -\u003e\n        // ... существующий код ...\n        RenamedFABLikeSquareButton(\n            onClick \u003d onValueChanged,\n            value \u003d value,\n            // ... существующий код ...\n        )\n    }\n    // ... существующий код ...\n}\n\n// ... существующий код ...\n\n@Composable\nfun RenamedFABLikeSquareButton(\n    isEnabled: Boolean,\n    onClick: (Float) -\u003e Unit,\n    value: Float,\n    type: TypesOfConviButs,\n    shape: Shape,\n    modifier: Modifier \u003d Modifier,\n    contentDescription: String\n) {\n    // ... существующий код ...\n}\n\n// ... существующий код ...\n\n@Composable\n@Preview\nfun RowOfConvenientButtonsPreview() {\n    RenamedRowOfFABLikeSquareButtons(\n        // ... существующий код ...\n    )\n}\n\n// ... существующий код ...\n\n@Preview(showBackground \u003d true)\n@Composable\nfun FABLikeSquareButtonPreview() {\n    RenamedFABLikeSquareButton(\n        // ... существующий код ...\n    )\n}\n\n// ... существующий код ...\n```\n\n▸ Коротко говоря, для переименования достаточно изменить имя функции (и ссылки на неё) во всех местах, где она используется.&quot;}]}" />
        <entry key="08b48268-0453-4364-a687-3c06b6e408fc" value="{&quot;id&quot;:&quot;08b48268-0453-4364-a687-3c06b6e408fc&quot;,&quot;name&quot;:&quot;Naming Functions for Better Understanding&quot;,&quot;timestamp&quot;:1739873265907,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nкак назвать эти функции для лучшего понимания?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;**Возможные варианты названий для большей ясности**:\n\n1. Для функции, которая рисует ряд кнопок (сейчас она называется ConvenientRowOfFABLikeSquareButtons):  \n   - `SquareFABButtonRow`  \n   - `ValueSelectorButtonRow`  \n   - `FABStyleButtonGroup`\n\n2. Для функции, которая рисует отдельную “квадратную” кнопку (сейчас она называется ConvenientFABLikeSquareButton):  \n   - `SquareFABButton`  \n   - `ValueSelectorButton`  \n   - `StyledSquareButton`\n\nПояснение:  \n- Вместо названия “Convenient” можно сосредоточиться на том, что именно делает функция (например, “ValueSelector” или “SquareFAB”).  \n- Слово “Row” или “Group” в первой функции указывает на то, что это список/группа кнопок.  \n- Во второй функции стоит подчеркнуть, что это одиночная кнопка с определённым дизайном.  \n\nТаким образом, новые названия лучше передают назначение и структуру компонентов.&quot;}]}" />
        <entry key="0f3674f0-6ac0-4ec8-baa2-969d096df896" value="{&quot;id&quot;:&quot;0f3674f0-6ac0-4ec8-baa2-969d096df896&quot;,&quot;name&quot;:&quot;Does the external appearance of tacos suit us?&quot;,&quot;timestamp&quot;:1739879641710,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nустраивает ли нас тако внешний вид?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;**Так, на мій погляд інтерфейс виглядає цілком охайно й зрозуміло.**  \nЯкщо є побажання внести корективи в елементи керування чи розташування, дайте знати.&quot;}]}" />
        <entry key="16692625-d9f6-4c31-a09f-86ceb914bbe8" value="{&quot;id&quot;:&quot;16692625-d9f6-4c31-a09f-86ceb914bbe8&quot;,&quot;name&quot;:&quot;Error: @Composable invocations can only happen from the context of a @Composable function&quot;,&quot;timestamp&quot;:1739876295825,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;${stringResource(labelResId)} control slider\&quot;\n            }\n        )\n\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\n@Composable invocations can only happen from the context of a @Composable function\n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;The error occurs because `stringResource()` is being called inside the `semantics` block, which is not a `@Composable` context. We need to prepare the content description string before using it in `semantics`.\n\nHere\u0027s the fix:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                // Prepare string outside of semantics block\n                val description \u003d stringResource(labelResId)\n                contentDescription \u003d \&quot;$description control slider\&quot;\n            }\n        )\n```\n\nThe key change is to move the `stringResource` call inside the semantics block to a local variable before using it in the contentDescription. This ensures the composable function is called in the correct context.&quot;}]}" />
        <entry key="1babebbb-c277-4968-8234-ca372cd086da" value="{&quot;id&quot;:&quot;1babebbb-c277-4968-8234-ca372cd086da&quot;,&quot;name&quot;:&quot;Android Bluetooth Bonding Permission Error Resolution&quot;,&quot;timestamp&quot;:1739841263108,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/bluetooth/manager/BluetoothConnectionManager.kt\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/BluetoothConnectionManager.kt\n            BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION -\u003e {\n                Log.e(TAG, \&quot;Authentication required, attempting to bond\&quot;)\n                _connectedDeviceAddress?.let { address -\u003e\n                    bluetoothAdapter.getRemoteDevice(address).createBond()\n                }\n            }\n\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\nCall requires permission which may be rejected by user: code should explicitly check to see if permission is available (with `checkPermission`) or explicitly handle a potential `SecurityException`\n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Below is a concise example of adding a permission check and handling the SecurityException around createBond(). This ensures you only call createBond() if the required permissions are granted.\n\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/BluetoothConnectionManager.kt\n// ... existing code ...\nBluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION -\u003e {\n    Log.e(TAG, \&quot;Authentication required, attempting to bond\&quot;)\n    _connectedDeviceAddress?.let { address -\u003e\n        try {\n            if (hasBluetoothPermissions()) {\n                bluetoothAdapter.getRemoteDevice(address).createBond()\n            } else {\n                handleMissingPermissions(\&quot;createBond\&quot;)\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;createBond\&quot;)\n        }\n    }\n}\n// ... existing code ...\n```\n\nExplanation:  \n1. We call hasBluetoothPermissions() first to ensure the BLUETOOTH_CONNECT permission is available.  \n2. We catch SecurityException so that if permission is denied, we can handle it gracefully.&quot;},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\npackage com.denior.motus.bluetooth.manager\n\nimport android.Manifest\nimport android.bluetooth.BluetoothAdapter\nimport android.bluetooth.BluetoothDevice\nimport android.bluetooth.le.BluetoothLeScanner\nimport android.bluetooth.le.ScanCallback\nimport android.bluetooth.le.ScanResult\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Handler\nimport android.os.Looper\nimport android.util.Log\nimport androidx.core.app.ActivityCompat\nimport com.denior.motus.bluetooth.interfaces.DeviceScannerInterface\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport javax.inject.Inject\n\nclass DeviceScanner @Inject constructor(\n    private val context: Context,\n    private val bluetoothAdapter: BluetoothAdapter?\n) : DeviceScannerInterface {\n\n    private val bluetoothLeScanner: BluetoothLeScanner? \u003d bluetoothAdapter?.bluetoothLeScanner\n    private val _deviceList \u003d MutableStateFlow\u003cSet\u003cBluetoothDevice\u003e\u003e(emptySet())\n    override val deviceList: StateFlow\u003cSet\u003cBluetoothDevice\u003e\u003e get() \u003d _deviceList\n    private val scanPeriod: Long \u003d 10000\n\n    private var scanning \u003d false\n    private val handler \u003d Handler(Looper.getMainLooper())\n    private val _isScanning \u003d MutableStateFlow(false)\n    override val isScanning: StateFlow\u003cBoolean\u003e \u003d _isScanning\n\n    private val leScanCallback \u003d object : ScanCallback() {\n        override fun onScanResult(callbackType: Int, result: ScanResult) {\n            // Check permission at runtime.\n            if (ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.BLUETOOTH_SCAN\n                ) !\u003d PackageManager.PERMISSION_GRANTED\n            ) {\n                return\n            }\n\n            try {\n                Log.d(\&quot;DeviceScanner\&quot;, \&quot;\&quot;\&quot;\n                |Device found:\n                |Address: ${result.device.address}\n                |Name: ${result.device.name}\n                |RSSI: ${result.rssi}\n                |TX Power: ${result.txPower}\n            \&quot;\&quot;\&quot;.trimMargin())\n            } catch (se: SecurityException) {\n                Log.e(\&quot;DeviceScanner\&quot;, \&quot;SecurityException: ${se.message}\&quot;)\n            }\n\n            _deviceList.value \u003d _deviceList.value.toMutableSet().apply { add(result.device) }\n        }\n    }\n\n    override fun startScanning() {\n        if (scanning) return\n\n        if (ActivityCompat.checkSelfPermission(\n                context,\n                Manifest.permission.BLUETOOTH_SCAN\n            ) !\u003d PackageManager.PERMISSION_GRANTED\n        ) {\n            Log.e(\&quot;DeviceScanner\&quot;, \&quot;Missing BLUETOOTH_SCAN permission\&quot;)\n            return\n        }\n\n        if (bluetoothAdapter?.isEnabled \u003d\u003d false) {\n            val enableBtIntent \u003d Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\n            context.startActivity(enableBtIntent)\n            return\n        }\n\n        try {\n            Log.d(\&quot;DeviceScanner\&quot;, \&quot;Starting BLE scan...\&quot;)\n            handler.postDelayed({\n                stopScanning()\n            }, scanPeriod)\n\n            try {\n                bluetoothLeScanner?.startScan(leScanCallback) ?: run {\n                    Log.e(\&quot;DeviceScanner\&quot;, \&quot;BluetoothLeScanner is null\&quot;)\n                    return\n                }\n            } catch (se: SecurityException) {\n                Log.e(\&quot;DeviceScanner\&quot;, \&quot;SecurityException: ${se.message}. BLUETOOTH_PRIVILEGED.\&quot;)\n                return\n            }\n            \n            scanning \u003d true\n            _isScanning.value \u003d true\n\n        } catch (e: Exception) {\n            Log.e(\&quot;DeviceScanner\&quot;, \&quot;Error starting scan: ${e.message}\&quot;, e)\n        }\n    }\n\n    override fun stopScanning() {\n        if (!scanning) return\n\n        if (ActivityCompat.checkSelfPermission(\n                context,\n                Manifest.permission.BLUETOOTH_SCAN\n            ) !\u003d PackageManager.PERMISSION_GRANTED\n        ) {\n            Log.e(\&quot;DeviceScanner\&quot;, \&quot;Missing BLUETOOTH_SCAN permission\&quot;)\n            return\n        }\n\n        try {\n            Log.d(\&quot;DeviceScanner\&quot;, \&quot;Stopping BLE scan...\&quot;)\n            bluetoothLeScanner?.stopScan(leScanCallback)\n            scanning \u003d false\n            _isScanning.value \u003d false\n\n        } catch (e: Exception) {\n            Log.e(\&quot;DeviceScanner\&quot;, \&quot;Error stopping scan: ${e.message}\&quot;, e)\n        }\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(1f, 60f)\n            val newCommand \u003d MotorCommand(\n                targetAngle \u003d _motorState.value.angle.toInt(),\n                rpm \u003d clampedRpm.toInt()\n            )\n            try {\n                sendMotorCommand(newCommand)\n                _motorState.update { it.copy(rpm \u003d clampedRpm) }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor speed: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.ConvenientRowOfFABLikeSquareButtons\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n                      },\n        floatingActionButton \u003d {\n        Column(\n            horizontalAlignment \u003d Alignment.CenterHorizontally,\n            modifier \u003d Modifier.fillMaxWidth()\n        ) {\n            OldDeviceFAB(\n                permission \u003d true,\n                isConnected \u003d isConnected,\n                viewModel \u003d viewModel\n            )\n        }\n    }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean\n) {\n    Column (verticalArrangement \u003d Arrangement.spacedBy(16.dp)){\n        MotorSpeedSlider(\n            value \u003d rpm, isEnabled \u003d isEnabled, onValueChange \u003d onRpmChanged\n        )\n        ConvenientRowOfFABLikeSquareButtons(\n            onValueChanged \u003d onRpmChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d listOf(1f, 15f, 19f, 30f, 45f, 60f),\n            isRecommended \u003d 19f,\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set minimum speed\&quot;\n                    60f -\u003e \&quot;Set maximum speed\&quot;\n                    else -\u003e \&quot;Set speed to ${angle.toInt()} RPM\&quot;\n                }\n            }\n        )\n        MotorAngleSlider(\n            value \u003d angle, isEnabled \u003d isEnabled, onValueChange \u003d onAngleChanged\n        )\n        ConvenientRowOfFABLikeSquareButtons(\n            onValueChanged \u003d onAngleChanged, isEnabled \u003d isEnabled,\n            values \u003d listOf(-360f, -180f, 0f, 180f, 360f),\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set neutral position\&quot;\n                    360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                    else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                }\n            }\n        )\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d 1f..60f,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d -360f..360f,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/OldFAB.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/OldFAB.kt\npackage com.denior.motus.ui.component\n\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExtendedFloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.state.SearchState\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun OldDeviceFAB(viewModel: MotusViewModel, permission: Boolean, isConnected: Boolean) {\n    val deviceList by viewModel.deviceList.collectAsState()\n    val searchState by viewModel.searchState.collectAsState()\n    var showDeviceList by remember { mutableStateOf(false) }\n    val connectionState by viewModel.connectionState.collectAsState()\n\n    val containerColor \u003d when {\n        !permission -\u003e MaterialTheme.colorScheme.tertiary\n        connectionState is ConnectionState.Failed -\u003e MaterialTheme.colorScheme.error\n        isConnected -\u003e MaterialTheme.colorScheme.primary\n        else -\u003e MaterialTheme.colorScheme.primary\n    }\n\n    val fabIcon \u003d when {\n        !permission -\u003e Icons.Default.Warning\n        connectionState is ConnectionState.Failed -\u003e Icons.Default.Warning\n        isConnected -\u003e Icons.Default.Search\n        searchState \u003d\u003d SearchState.Scanning -\u003e null\n        else -\u003e Icons.Default.Search\n    }\n\n    val fabText: String \u003d when {\n        !permission -\u003e stringResource(R.string.needs_permissions)\n        connectionState is ConnectionState.Failed -\u003e stringResource(R.string.connection_failed)\n        isConnected -\u003e stringResource(R.string.change_device)\n        searchState \u003d\u003d SearchState.Scanning -\u003e stringResource(R.string.scanning)\n        else -\u003e stringResource(R.string.select_device)\n    }\n\n    val requiredPermissions \u003d listOf(\n        Manifest.permission.BLUETOOTH_SCAN,\n        Manifest.permission.BLUETOOTH_CONNECT,\n        Manifest.permission.ACCESS_FINE_LOCATION,\n    )\n    val context \u003d androidx.compose.ui.platform.LocalContext.current\n    val hasAllPermissions \u003d requiredPermissions.all { perm -\u003e\n        androidx.core.content.ContextCompat.checkSelfPermission(context,\n            perm) \u003d\u003d PackageManager.PERMISSION_GRANTED\n    }\n\n\n    val permissionLauncher \u003d rememberLauncherForActivityResult(\n\n        ActivityResultContracts.RequestMultiplePermissions()\n\n    ) { perms -\u003e\n        if (perms.all { it.value }) {\n            viewModel.startScanning()\n            showDeviceList \u003d true\n        }\n    }\n\n    ExtendedFloatingActionButton(\n        onClick \u003d {\n            when {\n                !hasAllPermissions -\u003e {\n                    permissionLauncher.launch(requiredPermissions.toTypedArray())\n                }\n                connectionState is ConnectionState.Failed -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n                isConnected -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.stopScanning()\n                    showDeviceList \u003d true\n                }\n                searchState !\u003d SearchState.Scanning -\u003e {\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n            }\n        },\n        icon \u003d {\n            if (searchState \u003d\u003d SearchState.Scanning) {\n                CircularProgressIndicator(modifier \u003d Modifier.size(24.dp))\n            } else {\n                fabIcon?.let { Icon(it, \&quot;Device Control\&quot;) }\n            }\n        },\n        text \u003d { Text(fabText) },\n        expanded \u003d !isConnected,\n        containerColor \u003d containerColor,\n        contentColor \u003d MaterialTheme.colorScheme.onPrimary\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\n\n2025-02-18 01:13:08.944 18485-18485 MotusViewModel          com.denior.motus                     D  Starting scan, looking for device: F0:F5:BD:C9:66:1E\n2025-02-18 01:13:08.946 18485-18485 MotusViewModel          com.denior.motus                     E  Unexpected error during scanning: Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?\n                                                                                                    android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?\n                                                                                                    \tat android.app.ContextImpl.startActivity(ContextImpl.java:1133)\n                                                                                                    \tat android.app.ContextImpl.startActivity(ContextImpl.java:1109)\n                                                                                                    \tat android.content.ContextWrapper.startActivity(ContextWrapper.java:436)\n                                                                                                    \tat com.denior.motus.bluetooth.manager.DeviceScanner.startScanning(DeviceScanner.kt:77)\n                                                                                                    \tat com.denior.motus.ui.viewmodel.MotusViewModel$startScanning$1.invokeSuspend(MotusViewModel.kt:108)\n                                                                                                    \tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n                                                                                                    \tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:367)\n                                                                                                    \tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n                                                                                                    \tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:25)\n                                                                                                    \tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110)\n                                                                                                    \tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:126)\n                                                                                                    \tat kotlinx.coroutines.BuildersKt__Builders_commonKt.launch(Builders.common.kt:56)\n                                                                                                    \tat kotlinx.coroutines.BuildersKt.launch(Unknown Source:1)\n                                                                                                    \tat kotlinx.coroutines.BuildersKt__Builders_commonKt.launch$default(Builders.common.kt:47)\n                                                                                                    \tat kotlinx.coroutines.BuildersKt.launch$default(Unknown Source:1)\n                                                                                                    \tat com.denior.motus.ui.viewmodel.MotusViewModel.startScanning(MotusViewModel.kt:104)\n                                                                                                    \tat com.denior.motus.ui.component.OldFABKt.OldDeviceFAB$lambda$11$lambda$10(OldFAB.kt:102)\n                                                                                                    \tat com.denior.motus.ui.component.OldFABKt.$r8$lambda$PD628N8bEeEk6H1F4LR6gU4fu9M(Unknown Source:0)\n                                                                                                    \tat com.denior.motus.ui.component.OldFABKt$$ExternalSyntheticLambda1.invoke(D8$$SyntheticClass:0)\n                                                                                                    \tat androidx.compose.foundation.ClickableNode$clickPointerInput$3.invoke-k-4lQ0M(Clickable.kt:639)\n                                                                                                    \tat androidx.compose.foundation.ClickableNode$clickPointerInput$3.invoke(Clickable.kt:633)\n                                                                                                    \tat androidx.compose.foundation.gestures.TapGestureDetectorKt$detectTapAndPress$2$1.invokeSuspend(TapGestureDetector.kt:255)\n                                                                                                    \tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n                                                                                                    \tat kotlinx.coroutines.DispatchedTaskKt.resume(DispatchedTask.kt:179)\n                                                                                                    \tat kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:168)\n                                                                                                    \tat kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:474)\n                                                                                                    \tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:508)\n                                                                                                    \tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:497)\n                                                                                                    \tat kotlinx.coroutines.CancellableContinuationImpl.resumeWith(CancellableContinuationImpl.kt:368)\n                                                                                                    \tat androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl$PointerEventHandlerCoroutine.offerPointerEvent(SuspendingPointerInputFilter.kt:719)\n                                                                                                    \tat androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl.dispatchPointerEvent(SuspendingPointerInputFilter.kt:598)\n                                                                                                    \tat androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl.onPointerEvent-H0pRuoY(SuspendingPointerInputFilter.kt:620)\n                                                                                                    \tat androidx.compose.foundation.AbstractClickableNode.onPointerEvent-H0pRuoY(Clickable.kt:1044)\n                                                                                                    \tat androidx.compose.ui.input.pointer.Node.dispatchMainEventPass(HitPathTracker.kt:387)\n                                                                                                    \tat androidx.compose.ui.input.pointer.Node.dispatchMainEventPass(HitPathTracker.kt:373)\n                                                                                                    \tat androidx.compose.ui.input.pointer.NodeParent.dispatchMainEventPass(HitPathTracker.kt:229)\n                                                                                                    \tat androidx.compose.ui.input.pointer.HitPathTracker.dispatchChanges(HitPathTracker.kt:144)\n                                                                                                    \tat androidx.compose.ui.input.pointer.PointerInputEventProcessor.process-BIzXfog(PointerInputEventProcessor.kt:120)\n                                                                                                    \tat androidx.compose.ui.platform.AndroidComposeView.sendMotionEvent-8iAsVTc(AndroidComposeView.android.kt:1994)\n2025-02-18 01:13:08.946 18485-18485 MotusViewModel          com.denior.motus                     E  \tat androidx.compose.ui.platform.AndroidComposeView.handleMotionEvent-8iAsVTc(AndroidComposeView.android.kt:1945)\n                                                                                                    \tat androidx.compose.ui.platform.AndroidComposeView.dispatchTouchEvent(AndroidComposeView.android.kt:1829)\n                                                                                                    \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3126)\n                                                                                                    \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n                                                                                                    \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3126)\n                                                                                                    \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n                                                                                                    \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3126)\n                                                                                                    \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n                                                                                                    \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3126)\n                                                                                                    \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n                                                                                                    \tat com.android.internal.policy.DecorView.superDispatchTouchEvent(DecorView.java:511)\n                                                                                                    \tat com.android.internal.policy.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1922)\n                                                                                                    \tat android.app.Activity.dispatchTouchEvent(Activity.java:4505)\n                                                                                                    \tat com.android.internal.policy.DecorView.dispatchTouchEvent(DecorView.java:469)\n                                                                                                    \tat android.view.View.dispatchPointerEvent(View.java:15967)\n                                                                                                    \tat android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:7336)\n                                                                                                    \tat android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:7130)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6542)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:6599)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:6565)\n                                                                                                    \tat android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:6730)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:6573)\n                                                                                                    \tat android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:6787)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6546)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:6599)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:6565)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:6573)\n                                                                                                    \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6546)\n                                                                                                    \tat android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:9690)\n                                                                                                    \tat android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:9606)\n                                                                                                    \tat android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:9567)\n                                                                                                    \tat android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:9837)\n                                                                                                    \tat android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:274)\n                                                                                                    \tat android.os.MessageQueue.nativePollOnce(Native Method)\n                                                                                                    \tat android.os.MessageQueue.next(MessageQueue.java:342)\n                                                                                                    \tat android.os.Looper.loopOnce(Looper.java:183)\n                                                                                                    \tat android.os.Looper.loop(Looper.java:362)\n                                                                                                    \tat android.app.ActivityThread.main(ActivityThread.java:8393)\n                                                                                                    \tat java.lang.reflect.Method.invoke(Native Method)\n                                                                                                    \tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:552)\n                                                                                                    \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:992)\n2025-02-18 01:13:08.946 18485-18485 MotusViewModel          com.denior.motus                     D  Stopping scan...\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Below is a concise fix to add the FLAG_ACTIVITY_NEW_TASK so you can start an activity from a non-Activity context:\n\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\n// ... existing code ...\nif (bluetoothAdapter?.isEnabled \u003d\u003d false) {\n    val enableBtIntent \u003d Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE).apply {\n        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n    }\n    context.startActivity(enableBtIntent)\n    return\n}\n// ... existing code ...\n```\n\nExplanation:  \n• Use addFlags(Intent.FLAG_ACTIVITY_NEW_TASK) when starting an Activity outside of an Activity context.  \n• This prevents the AndroidRuntimeException by allowing the activity to start on a new task stack.&quot;}]}" />
        <entry key="1d99dbe5-8416-44b3-8064-3abdd198ab84" value="{&quot;id&quot;:&quot;1d99dbe5-8416-44b3-8064-3abdd198ab84&quot;,&quot;name&quot;:&quot;Error Resolving Missing Parameters in MotorSpeedSlider&quot;,&quot;timestamp&quot;:1739876415843,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n\n    ) {\n    Column(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        MotorControlSlider()\n        MotorSpeedSlider(\n            value \u003d rpm, isEnabled \u003d isEnabled, onValueChange \u003d onRpmChanged\n        )\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\nNo value passed for parameter \u0027value\u0027. No value passed for parameter \u0027isEnabled\u0027. No value passed for parameter \u0027onValueChange\u0027. No value passed for parameter \u0027valueRange\u0027. No value passed for parameter \u0027steps\u0027. No value passed for parameter \u0027labelResId\u0027. No value passed for parameter \u0027minLabelResId\u0027. No value passed for parameter \u0027maxLabelResId\u0027. No value passed for parameter \u0027unit\u0027. \n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;I see the issue - you have an empty `MotorControlSlider()` call that\u0027s missing all required parameters. Since you already have specific sliders for speed and angle, you should remove this empty call.\n\nHere\u0027s the fix:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n) {\n    Column(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        // Remove this line\n        // MotorControlSlider()\n        MotorSpeedSlider(\n            value \u003d rpm, isEnabled \u003d isEnabled, onValueChange \u003d onRpmChanged\n        )\n        // ... rest of the code ...\n    }\n}\n```\n\nThe empty `MotorControlSlider()` call appears to be unnecessary since you\u0027re already using the specific `MotorSpeedSlider` and `MotorAngleSlider` components.&quot;}]}" />
        <entry key="2f9ca0b6-9d90-449b-8529-dcd0882bdad7" value="{&quot;id&quot;:&quot;2f9ca0b6-9d90-449b-8529-dcd0882bdad7&quot;,&quot;name&quot;:&quot;Хelp with File&quot;,&quot;timestamp&quot;:1739841483193,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nЧто мне елать с этим файлом?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;В Android это специальный файл для указания правил резервного копирования (cloud-backup) и переноса данных (device-transfer). В нём можно указывать, какие файлы и данные включать или исключать при резервном копировании в облако или при переносе на другое устройство. \n\nНапример, вы можете раскомментировать блоки \u003cinclude\u003e и \u003cexclude\u003e, чтобы настроить, какие файлы или настройки должны сохраняться при резервном копировании и восстановлении (или при переносе с устройства на устройство). Подробности можно найти в официальной документации здесь:  \nhttps://developer.android.com/about/versions/12/backup-restore#xml-changes&quot;}]}" />
        <entry key="32274b33-7243-42f7-8e0d-7111d67d3935" value="{&quot;id&quot;:&quot;32274b33-7243-42f7-8e0d-7111d67d3935&quot;,&quot;name&quot;:&quot;Resolving Missing Parameter Errors in ControlScreen.kt&quot;,&quot;timestamp&quot;:1739879162798,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n@Preview\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen()\n}\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\nNo value passed for parameter \u0027modifier\u0027. No value passed for parameter \u0027connectionState\u0027. No value passed for parameter \u0027onSpeedChange\u0027. No value passed for parameter \u0027onAngleChange\u0027. No value passed for parameter \u0027isConnected\u0027. No value passed for parameter \u0027motorState\u0027. \n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Here’s a concise fix. You just need to supply the required parameters to the function call in ControlScreenVariant:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n// ... existing code ...\n@Preview\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    )\n}\n// ... existing code ...\n```\n\nExplanation: The error occurs because the original ControlScreenVariant called ControlScreen with no arguments, but ControlScreen requires six parameters. Passing these values fixes the issue.&quot;}]}" />
        <entry key="35010e4a-a58d-4432-9260-9fe9e3f947b3" value="{&quot;id&quot;:&quot;35010e4a-a58d-4432-9260-9fe9e3f947b3&quot;,&quot;name&quot;:&quot;Design Discussion: Exterior Appearance of Tacos&quot;,&quot;timestamp&quot;:1739879660955,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nустраивает ли нас тако внешний вид?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Судячи з зображення, інтерфейс виглядає чистим та зрозумілим, але я бачу кілька моментів, які можна покращити:\n\n1. **Slider-и**:\n- Можливо варто додати більше візуального розділення між блоками швидкості та кута\n- Додати більш чіткі позначки основних значень на слайдерах\n\n2. **Кнопки швидких значень**:\n- Рекомендоване значення (19 об/хв) виділено рожевим кольором, але можливо варто зробити це виділення більш помітним\n- Можна додати невеликі підписи під кнопками, щоб пояснити чому саме ці значення рекомендовані\n\n3. **Статус підключення**:\n- Можна зробити індикатор стану більш помітним\n- Додати іконку, яка відображає статус з\u0027єднання\n\n4. **Загальні покращення**:\n- Додати анімації при зміні значень\n- Покращити контрастність тексту\n- Можливо додати графічне представлення поточного положення мотора\n\nЧи хотіли б ви, щоб я показав конкретні приклади змін у коді для будь-якого з цих покращень?&quot;}]}" />
        <entry key="36846886-a201-4cb4-8a94-14e924ace9ca" value="{&quot;id&quot;:&quot;36846886-a201-4cb4-8a94-14e924ace9ca&quot;,&quot;name&quot;:&quot;Conversation About File Handling&quot;,&quot;timestamp&quot;:1739841442634,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nЧто мне елать с этим файлом?\n\u003c/user_query\u003e&quot;}]}" />
        <entry key="37a18952-4a20-4b19-944e-271dc0b1bfae" value="{&quot;id&quot;:&quot;37a18952-4a20-4b19-944e-271dc0b1bfae&quot;,&quot;name&quot;:&quot;Refactoring Motor Control Sliders into a Single Function&quot;,&quot;timestamp&quot;:1739876209692,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit, angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nI think It wll be better if we create one function from it\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;I\u0027ll help you combine `MotorSpeedSlider` and `MotorAngleSlider` into a single reusable function since they share similar structure. Here\u0027s the proposed change:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;${stringResource(labelResId)} control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                    contentDescription \u003d \&quot;${stringResource(labelResId)} control slider\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n// Usage in MotorControl:\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n) {\n    Column(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        MotorControlSlider(\n            value \u003d rpm,\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onRpmChanged,\n            valueRange \u003d 1f..60f,\n            steps \u003d 15,\n            labelResId \u003d R.string.speed_label,\n            minLabelResId \u003d R.string.min_speed,\n            maxLabelResId \u003d R.string.max_speed,\n            unit \u003d \&quot;RPM\&quot;\n        )\n        // ... ValueSelectorButtonRow for speed ...\n\n        MotorControlSlider(\n            value \u003d angle,\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onAngleChanged,\n            valueRange \u003d -360f..360f,\n            steps \u003d 72,\n            labelResId \u003d R.string.angle_label,\n            minLabelResId \u003d R.string.min_angle,\n            maxLabelResId \u003d R.string.max_angle,\n            unit \u003d \&quot;degrees\&quot;\n        )\n        // ... ValueSelectorButtonRow for angle ...\n    }\n}\n```\n\nThis refactoring:\n1. Creates a single `MotorControlSlider` component that can be used for both speed and angle controls\n2. Removes code duplication\n3. Makes the component more flexible and reusable\n4. Parameterizes all the variable elements (labels, ranges, steps, units)\n5. Maintains the same functionality and appearance as before\n\nYou can replace both `MotorSpeedSlider` and `MotorAngleSlider` with this new component and update their usages accordingly.&quot;}]}" />
        <entry key="3c985fde-4d77-4d2e-8f11-00d4c4d5094c" value="{&quot;id&quot;:&quot;3c985fde-4d77-4d2e-8f11-00d4c4d5094c&quot;,&quot;name&quot;:&quot;Simplifying the First-Time User Experience and Permission Requests&quot;,&quot;timestamp&quot;:1739841725933,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/MainActivity.kt\n```kotlin:app/src/main/java/com/denior/motus/MainActivity.kt\npackage com.denior.motus\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport com.denior.motus.ui.screen.MotusApp\nimport com.denior.motus.ui.theme.MotusTheme\nimport dagger.hilt.android.AndroidEntryPoint\n\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            MotusTheme {\n                MotusApp()\n            }\n        }\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.ConvenientRowOfFABLikeSquareButtons\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n                      },\n        floatingActionButton \u003d {\n        Column(\n            horizontalAlignment \u003d Alignment.CenterHorizontally,\n            modifier \u003d Modifier.fillMaxWidth()\n        ) {\n            OldDeviceFAB(\n                permission \u003d true,\n                isConnected \u003d isConnected,\n                viewModel \u003d viewModel\n            )\n        }\n    }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean\n) {\n    Column (verticalArrangement \u003d Arrangement.spacedBy(16.dp)){\n        MotorSpeedSlider(\n            value \u003d rpm, isEnabled \u003d isEnabled, onValueChange \u003d onRpmChanged\n        )\n        ConvenientRowOfFABLikeSquareButtons(\n            onValueChanged \u003d onRpmChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d listOf(1f, 15f, 19f, 30f, 45f, 60f),\n            isRecommended \u003d 19f,\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set minimum speed\&quot;\n                    60f -\u003e \&quot;Set maximum speed\&quot;\n                    else -\u003e \&quot;Set speed to ${angle.toInt()} RPM\&quot;\n                }\n            }\n        )\n        MotorAngleSlider(\n            value \u003d angle, isEnabled \u003d isEnabled, onValueChange \u003d onAngleChanged\n        )\n        ConvenientRowOfFABLikeSquareButtons(\n            onValueChanged \u003d onAngleChanged, isEnabled \u003d isEnabled,\n            values \u003d listOf(-360f, -180f, 0f, 180f, 360f),\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set neutral position\&quot;\n                    360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                    else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                }\n            }\n        )\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d 1f..60f,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d -360f..360f,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/OldFAB.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/OldFAB.kt\npackage com.denior.motus.ui.component\n\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExtendedFloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.state.SearchState\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun OldDeviceFAB(viewModel: MotusViewModel, permission: Boolean, isConnected: Boolean) {\n    val deviceList by viewModel.deviceList.collectAsState()\n    val searchState by viewModel.searchState.collectAsState()\n    var showDeviceList by remember { mutableStateOf(false) }\n    val connectionState by viewModel.connectionState.collectAsState()\n\n    val containerColor \u003d when {\n        !permission -\u003e MaterialTheme.colorScheme.tertiary\n        connectionState is ConnectionState.Failed -\u003e MaterialTheme.colorScheme.error\n        isConnected -\u003e MaterialTheme.colorScheme.primary\n        else -\u003e MaterialTheme.colorScheme.primary\n    }\n\n    val fabIcon \u003d when {\n        !permission -\u003e Icons.Default.Warning\n        connectionState is ConnectionState.Failed -\u003e Icons.Default.Warning\n        isConnected -\u003e Icons.Default.Search\n        searchState \u003d\u003d SearchState.Scanning -\u003e null\n        else -\u003e Icons.Default.Search\n    }\n\n    val fabText: String \u003d when {\n        !permission -\u003e stringResource(R.string.needs_permissions)\n        connectionState is ConnectionState.Failed -\u003e stringResource(R.string.connection_failed)\n        isConnected -\u003e stringResource(R.string.change_device)\n        searchState \u003d\u003d SearchState.Scanning -\u003e stringResource(R.string.scanning)\n        else -\u003e stringResource(R.string.select_device)\n    }\n\n    val requiredPermissions \u003d listOf(\n        Manifest.permission.BLUETOOTH_SCAN,\n        Manifest.permission.BLUETOOTH_CONNECT,\n        Manifest.permission.ACCESS_FINE_LOCATION,\n    )\n    val context \u003d androidx.compose.ui.platform.LocalContext.current\n    val hasAllPermissions \u003d requiredPermissions.all { perm -\u003e\n        androidx.core.content.ContextCompat.checkSelfPermission(context,\n            perm) \u003d\u003d PackageManager.PERMISSION_GRANTED\n    }\n\n\n    val permissionLauncher \u003d rememberLauncherForActivityResult(\n\n        ActivityResultContracts.RequestMultiplePermissions()\n\n    ) { perms -\u003e\n        if (perms.all { it.value }) {\n            viewModel.startScanning()\n            showDeviceList \u003d true\n        }\n    }\n\n    ExtendedFloatingActionButton(\n        onClick \u003d {\n            when {\n                !hasAllPermissions -\u003e {\n                    permissionLauncher.launch(requiredPermissions.toTypedArray())\n                }\n                connectionState is ConnectionState.Failed -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n                isConnected -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.stopScanning()\n                    showDeviceList \u003d true\n                }\n                searchState !\u003d SearchState.Scanning -\u003e {\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n            }\n        },\n        icon \u003d {\n            if (searchState \u003d\u003d SearchState.Scanning) {\n                CircularProgressIndicator(modifier \u003d Modifier.size(24.dp))\n            } else {\n                fabIcon?.let { Icon(it, \&quot;Device Control\&quot;) }\n            }\n        },\n        text \u003d { Text(fabText) },\n        expanded \u003d !isConnected,\n        containerColor \u003d containerColor,\n        contentColor \u003d MaterialTheme.colorScheme.onPrimary\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nКак сделать первый вход пользователя более понятным и дружеблюбным и с указанием, что ему нужно предоставить разрешения\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Ниже приведён пример упрощённого решения на уровне интерфейса: можно добавить диалог (Dialog/AlertDialog), который будет появляться при первом запуске или при отсутствии нужных разрешений. В нём кратко объясняется суть разрешений и предлагается кнопка, вызывающая запрос разрешений. Таким образом пользователь будет заранее понимать, что от него требуется.\n\nНиже показан фрагмент кода с внесёнными изменениями в OldFAB.kt (добавлен новый диалог и логика его отображения). Обратите внимание, что в примере для наглядности используется AlertDialog; при желании вы можете кастомизировать внешний вид или применить более расширенный onboarding-экран.\n\n```kotlin:app/src/main/java/com/denior/motus/ui/component/OldFAB.kt\n// ... существующий код ...\n\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.TextButton\n\n// ... существующий код ...\n\n@Composable\nfun OldDeviceFAB(viewModel: MotusViewModel, permission: Boolean, isConnected: Boolean) {\n    // ... существующая логика ...\n\n    // Добавленная переменная состояния, чтобы управлять видимостью диалога\n    var showPermissionDialog by remember { mutableStateOf(false) }\n\n    if (!hasAllPermissions \u0026\u0026 showPermissionDialog) {\n        PermissionDialog(\n            onDismissRequest \u003d { showPermissionDialog \u003d false },\n            onConfirm \u003d {\n                showPermissionDialog \u003d false\n                permissionLauncher.launch(requiredPermissions.toTypedArray())\n            }\n        )\n    }\n\n    ExtendedFloatingActionButton(\n        onClick \u003d {\n            when {\n                !hasAllPermissions -\u003e {\n                    // Вместо немедленного запроса разрешений – \n                    // сначала покажем пользователю диалог с пояснениями\n                    showPermissionDialog \u003d true\n                }\n                // ... существующая логика ...\n            }\n        },\n        // ... существующий код ...\n    )\n}\n\n// Новый диалог с пояснением важности разрешений\n@Composable\nfun PermissionDialog(\n    onDismissRequest: () -\u003e Unit,\n    onConfirm: () -\u003e Unit\n) {\n    AlertDialog(\n        onDismissRequest \u003d onDismissRequest,\n        title \u003d { Text(\&quot;Разрешения необходимы\&quot;) },\n        text \u003d {\n            Text(\&quot;Для нормальной работы приложения нужно предоставить доступ к Bluetooth и местоположению. Нажмите \u0027Предоставить\u0027, чтобы продолжить.\&quot;)\n        },\n        confirmButton \u003d {\n            Button(onClick \u003d onConfirm) {\n                Text(\&quot;Предоставить\&quot;)\n            }\n        },\n        dismissButton \u003d {\n            TextButton(onClick \u003d onDismissRequest) {\n                Text(\&quot;Отмена\&quot;)\n            }\n        }\n    )\n}\n\n// ... существующий код ...\n```\n\nКраткое объяснение:\n• Добавили новую переменную showPermissionDialog, чтобы контролировать показ диалога.  \n• Заменили прямой вызов permissionLauncher.launch() на отображение диалога, в котором пользователю кратко объясняется цель разрешений.  \n• Если пользователь соглашается, мы вызываем permissionLauncher и запрашиваем разрешения.  \n• Вы можете расширять данную идею, например, показывать диалог только при первом запуске, сохранив этот факт во ViewModel или SharedPreferences.  &quot;}]}" />
        <entry key="4118eb35-9fd7-481f-8e0d-2cb9cf9f789f" value="{&quot;id&quot;:&quot;4118eb35-9fd7-481f-8e0d-2cb9cf9f789f&quot;,&quot;name&quot;:&quot;Что делать с файлом?&quot;,&quot;timestamp&quot;:1739841431181,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nЧто мне елать с этим файлом?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;There was an unknown error. Here is my cutoff response:\n&quot;}]}" />
        <entry key="46f56cae-1472-4514-80f4-98a2d9703bf7" value="{&quot;id&quot;:&quot;46f56cae-1472-4514-80f4-98a2d9703bf7&quot;,&quot;name&quot;:&quot;Accessibility and Adaptability Issues Discussion&quot;,&quot;timestamp&quot;:1739875149835,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nКакие есть проблемы в этом с точки зрения доступности и адаптивности\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Рассмотрим основные проблемы с точки зрения доступности (accessibility) и адаптивности в данном коде:\n\n1. **Семантика и описания для TalkBack:**\n- Контент-дескрипторы хотя и присутствуют, но могли бы быть более информативными\n- Не хватает role (роли) для кнопок, которая бы явно указывала на тип элемента управления\n- Рекомендуемое значение никак не обозначается для скринридеров\n\n2. **Цветовое оформление:**\n- Нет явного различия между обычными и рекомендуемыми кнопками кроме типа (FilledTonalButton)\n- Отсутствует контрастность между состояниями кнопок\n\n3. **Размеры и тактильность:**\n- Закомментированная высота кнопок (`height(60.dp)`) может привести к слишком маленьким тач-таргетам\n- Нет минимального размера для touch target (должен быть минимум 48dp)\n\nВот предлагаемые исправления:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\n@Composable\nfun ConvenientFABLikeSquareButton(\n    // ... существующие параметры ...\n) {\n    val buttonModifier \u003d Modifier\n        .defaultMinSize(minHeight \u003d 48.dp) // Минимальный размер для touch target\n        .semantics { \n            this.contentDescription \u003d contentDescription\n            role \u003d Role.Button\n            if (type \u003d\u003d TypesOfConviButs.RECOMMENDED) {\n                stateDescription \u003d \&quot;Рекомендуемое значение\&quot;\n            }\n        }\n        .then(modifier)\n\n    when (type) {\n        TypesOfConviButs.RECOMMENDED -\u003e FilledTonalButton(\n            enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            colors \u003d ButtonDefaults.filledTonalButtonColors(\n                containerColor \u003d MaterialTheme.colorScheme.secondaryContainer,\n                contentColor \u003d MaterialTheme.colorScheme.onSecondaryContainer\n            ),\n            onClick \u003d { onClick(value) }\n        ) {\n            Text(\n                text \u003d \&quot;${value.toInt()}\&quot;,\n                style \u003d MaterialTheme.typography.titleMedium\n            )\n        }\n        // ... остальные case\n    }\n}\n```\n\nДополнительные рекомендации:\n\n1. **Адаптивность:**\n- Добавить поддержку различных размеров экрана через модификатор `.windowInsetsPadding()`\n- Использовать адаптивные отступы вместо фиксированных\n- Рассмотреть возможность вертикального расположения кнопок на узких экранах\n\n2. **Доступность:**\n- Добавить поддержку управления с клавиатуры\n- Использовать более информативные contentDescription\n- Добавить haptic feedback при нажатии\n\n3. **Темы:**\n- Убедиться, что цвета хорошо работают как в светлой, так и в темной теме\n- Проверить контрастность всех состояний кнопок\n\nПример улучшенного contentDescription:\n\n```kotlin\ncontentDescriptionForParameter \u003d { value -\u003e\n    when (value) {\n        30f -\u003e \&quot;Установить минимальную скорость 30 оборотов в минуту\&quot;\n        90f -\u003e \&quot;Установить максимальную скорость 90 оборотов в минуту\&quot;\n        else -\u003e \&quot;Установить скорость $value оборотов в минуту${\n            if (isRecommended \u003d\u003d value) \&quot;, рекомендуемое значение\&quot; else \&quot;\&quot;\n        }\&quot;\n    }\n}\n```&quot;}]}" />
        <entry key="487d6d76-87e2-472f-91d2-ffeb56d11773" value="{&quot;id&quot;:&quot;487d6d76-87e2-472f-91d2-ffeb56d11773&quot;,&quot;name&quot;:&quot;Testing MotorCommand Serialization in Kotlin&quot;,&quot;timestamp&quot;:1739879991757,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/data/model/MotorCommand.kt\n```kotlin:app/src/main/java/com/denior/motus/data/model/MotorCommand.kt\ndata class MotorCommand(\n    val targetAngle: Int,   // 32-bit signed integer (-360 to 360)\n    val rpm: Int            // 16-bit unsigned integer (1-60)\n) {\n    fun toByteArray(): ByteArray {\n        return ByteBuffer.allocate(6)  // 4 bytes angle + 2 bytes RPM\n            .order(ByteOrder.LITTLE_ENDIAN)\n            .putInt(targetAngle.coerceIn(-360, 360))\n            .putShort(rpm.coerceIn(0, 60).toShort()) \n            .array()\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nнам нужно как следует протестировать это \n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Я помогу создать модульные тесты для класса `MotorCommand`. Вот предлагаемый тестовый класс:\n\n```kotlin:app/src/test/java/com/denior/motus/data/model/MotorCommandTest.kt\nimport org.junit.Test\nimport org.junit.Assert.*\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\nclass MotorCommandTest {\n    \n    @Test\n    fun `toByteArray converts valid values correctly`() {\n        val command \u003d MotorCommand(targetAngle \u003d 180, rpm \u003d 30)\n        val bytes \u003d command.toByteArray()\n        \n        // Проверяем правильность преобразования\n        val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n        assertEquals(180, buffer.getInt())\n        assertEquals(30, buffer.getShort().toInt())\n    }\n    \n    @Test\n    fun `toByteArray clamps angle to valid range`() {\n        val command \u003d MotorCommand(targetAngle \u003d 400, rpm \u003d 30)\n        val bytes \u003d command.toByteArray()\n        \n        val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n        assertEquals(360, buffer.getInt()) // Должно быть ограничено до 360\n    }\n    \n    @Test\n    fun `toByteArray clamps negative angle to valid range`() {\n        val command \u003d MotorCommand(targetAngle \u003d -400, rpm \u003d 30)\n        val bytes \u003d command.toByteArray()\n        \n        val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n        assertEquals(-360, buffer.getInt())\n    }\n    \n    @Test\n    fun `toByteArray clamps rpm to valid range`() {\n        val command \u003d MotorCommand(targetAngle \u003d 180, rpm \u003d 100)\n        val bytes \u003d command.toByteArray()\n        \n        val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n        buffer.getInt() // Пропускаем значение угла\n        assertEquals(60, buffer.getShort().toInt())\n    }\n    \n    @Test\n    fun `toByteArray clamps negative rpm to zero`() {\n        val command \u003d MotorCommand(targetAngle \u003d 180, rpm \u003d -10)\n        val bytes \u003d command.toByteArray()\n        \n        val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n        buffer.getInt() // Пропускаем значение угла\n        assertEquals(0, buffer.getShort().toInt())\n    }\n    \n    @Test\n    fun `byte array has correct size`() {\n        val command \u003d MotorCommand(targetAngle \u003d 180, rpm \u003d 30)\n        val bytes \u003d command.toByteArray()\n        \n        assertEquals(6, bytes.size)\n    }\n}\n```\n\nЭтот тестовый класс проверяет следующие аспекты:\n1. Корректное преобразование валидных значений в байты\n2. Ограничение угла в диапазоне от -360 до 360\n3. Ограничение RPM в диапазоне от 0 до 60\n4. Правильную обработку отрицательных значений\n5. Корректный размер получаемого массива байтов\n\nКаждый тест имеет понятное описание и проверяет конкретный аспект функциональности. Для запуска тестов вам нужно:\n1. Создать соответствующий файл в директории test\n2. Убедиться, что в build.gradle добавлены зависимости для тестирования (JUnit)\n3. Запустить тесты через Android Studio или через командную строку\n\nДайте знать, если нужны дополнительные пояснения или есть вопросы по тестам!&quot;}]}" />
        <entry key="5b534483-2474-406f-b1dd-fff887639af2" value="{&quot;id&quot;:&quot;5b534483-2474-406f-b1dd-fff887639af2&quot;,&quot;name&quot;:&quot;Code Review and Recommendations for Motor Control UI&quot;,&quot;timestamp&quot;:1739876999040,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            Column(\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n                modifier \u003d Modifier.fillMaxWidth()\n            ) {\n                OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n            }\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    Column(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        MotorControlSlider(\n            value \u003d rpm,\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onRpmChanged,\n            valueRange \u003d 0f..60f,\n            steps \u003d 15,\n            labelResId \u003dR.string.speed_label ,\n            minLabelResId \u003d R.string.min_speed,\n            maxLabelResId \u003d R.string.max_speed,\n            unit \u003d  \&quot;RPM\&quot;\n        )\n        MotorSpeedSlider(\n            value \u003d rpm,\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onRpmChanged\n        )\n        ValueSelectorButtonRow(\n            onValueChanged \u003d onRpmChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n            isRecommended \u003d 19f,\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set minimum speed\&quot;\n                    60f -\u003e \&quot;Set maximum spe1f..60fed\&quot;\n                    else -\u003e \&quot;Set speed to ${angle.toInt()} RPM\&quot;\n                }\n            }\n        )\n        MotorControlSlider(\n            value \u003d angle,\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onAngleChanged,\n            valueRange \u003d -180f..180f,\n            steps \u003d 15,\n            labelResId \u003d R.string.angle_label,\n            minLabelResId \u003d R.string.min_angle,\n            maxLabelResId \u003d R.string.max_angle,\n            unit \u003d \&quot;Degrees\&quot;\n        )\n        MotorAngleSlider(\n            value \u003d angle, isEnabled \u003d isEnabled, onValueChange \u003d onAngleChanged\n        )\n        ValueSelectorButtonRow(\n            onValueChanged \u003d onAngleChanged, isEnabled \u003d isEnabled,\n            values \u003d listOf(-360f, -180f, 180f, 360f),\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set neutral position\&quot;\n                    360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                    else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                }\n            }\n        )\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nrecomendations\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;After reviewing your code, I have several recommendations to improve it:\n\n1. **Remove Duplicate Slider Components**\nYou currently have both `MotorControlSlider` and specific sliders (`MotorSpeedSlider`/`MotorAngleSlider`) that essentially do the same thing. I recommend removing the duplicate implementations and using the generic `MotorControlSlider` everywhere.\n\n2. **Fix Content Description Bug**\nIn the `ValueSelectorButtonRow`, there\u0027s a bug in the content description:\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\ncontentDescriptionForParameter \u003d { float -\u003e\n    when (float) {\n        0f -\u003e \&quot;Set minimum speed\&quot;\n        60f -\u003e \&quot;Set maximum spe1f..60fed\&quot; // This is clearly a typo\n        else -\u003e \&quot;Set speed to ${angle.toInt()} RPM\&quot; // Using \u0027angle\u0027 instead of \u0027float\u0027\n    }\n}\n```\n\n3. **Improve State Handling**\nThe `isConnected` check is done in multiple places. Consider wrapping these checks in the ViewModel instead of the UI layer.\n\n4. **Consolidate Constants**\nMove magic numbers and ranges into constants or a configuration object:\n```kotlin\nobject MotorConstants {\n    const val MIN_SPEED \u003d 0f\n    const val MAX_SPEED \u003d 60f\n    const val RECOMMENDED_SPEED \u003d 19f\n    const val MIN_ANGLE \u003d -360f\n    const val MAX_ANGLE \u003d 360f\n    val SPEED_RANGE \u003d MIN_SPEED..MAX_SPEED\n    val ANGLE_RANGE \u003d MIN_ANGLE..MAX_ANGLE\n}\n```\n\n5. **Semantic Improvements**\nThe `MotorControlSlider` has an empty semantics block:\n```kotlin\nText(\n    text \u003d stringResource(labelResId, value.toInt()),\n    style \u003d MaterialTheme.typography.titleMedium,\n    modifier \u003d Modifier.semantics {\n        // Empty block should be removed or filled\n    }\n)\n```\n\n6. **Preview Parameters**\nConsider using `@PreviewParameter` for your previews to show different states and configurations.\n\n7. **Error Handling**\nAdd error handling for invalid values and edge cases, especially for the angle and speed inputs.\n\nWould you like me to provide specific code implementations for any of these recommendations?&quot;}]}" />
        <entry key="5c9f14cb-464e-4321-a943-ed0c6184796c" value="{&quot;id&quot;:&quot;5c9f14cb-464e-4321-a943-ed0c6184796c&quot;,&quot;name&quot;:&quot;Resolving ACCESS_FINE_LOCATION and ACCESS_COARSE_LOCATION Permission Error&quot;,&quot;timestamp&quot;:1739894659316,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/AndroidManifest.xml\n```xml:app/src/main/AndroidManifest.xml\n\n    \u003c!-- Request legacy Bluetooth permissions on older devices. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH\&quot; android:maxSdkVersion\u003d\&quot;30\&quot; /\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_ADMIN\&quot; android:maxSdkVersion\u003d\&quot;30\&quot; /\u003e\n\n    \u003c!-- Needed only if your app makes the device discoverable to Bluetooth devices. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_ADVERTISE\&quot; /\u003e\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\nIf you need access to FINE location, you must request both `ACCESS_FINE_LOCATION` and `ACCESS_COARSE_LOCATION`\n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;The request was cancelled. Here is my cutoff response:\nHere’s a concise fix: add the ACCESS_COARSE_LOCATION permission alongside ACCESS_FINE_LOCATION in your Manifest. This ensures you have the correct runtime permissions, especially on older devices.\n\n```xml:app/src/main/AndroidManifest.xml\n\u003c!-- ... existing code ... --\u003e\n\u003cuses-permission&quot;},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/MainActivity.kt\n```kotlin:app/src/main/java/com/denior/motus/MainActivity.kt\npackage com.denior.motus\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport com.denior.motus.ui.screen.MotusApp\nimport com.denior.motus.ui.theme.MotusTheme\nimport dagger.hilt.android.AndroidEntryPoint\n\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            MotusTheme {\n                MotusApp()\n            }\n        }\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Wallpapers\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onRpmChanged,\n                isEnabled \u003d isEnabled,\n                values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n                isRecommended \u003d 19f,\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set minimum speed\&quot;\n                        60f -\u003e \&quot;Set maximum speed\&quot;\n                        else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n                    }\n                }\n            )\n        }\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled,\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged, isEnabled \u003d isAngleControlEnabled,\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(\n    device \u003d \&quot;spec:width\u003d1440px,height\u003d3360px,dpi\u003d640,orientation\u003dlandscape\&quot;, locale \u003d \&quot;uk\&quot;,\n    showSystemUi \u003d false, showBackground \u003d true, wallpaper \u003d Wallpapers.GREEN_DOMINATED_EXAMPLE\n)\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/OldFAB.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/OldFAB.kt\npackage com.denior.motus.ui.component\n\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExtendedFloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.state.SearchState\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun OldDeviceFAB(viewModel: MotusViewModel, permission: Boolean, isConnected: Boolean) {\n    val deviceList by viewModel.deviceList.collectAsState()\n    val searchState by viewModel.searchState.collectAsState()\n    var showDeviceList by remember { mutableStateOf(false) }\n    val connectionState by viewModel.connectionState.collectAsState()\n\n    val containerColor \u003d when {\n        !permission -\u003e MaterialTheme.colorScheme.tertiary\n        connectionState is ConnectionState.Failed -\u003e MaterialTheme.colorScheme.error\n        isConnected -\u003e MaterialTheme.colorScheme.primary\n        else -\u003e MaterialTheme.colorScheme.primary\n    }\n\n    val fabIcon \u003d when {\n        !permission -\u003e Icons.Default.Warning\n        connectionState is ConnectionState.Failed -\u003e Icons.Default.Warning\n        isConnected -\u003e Icons.Default.Search\n        searchState \u003d\u003d SearchState.Scanning -\u003e null\n        else -\u003e Icons.Default.Search\n    }\n\n    val fabText: String \u003d when {\n        !permission -\u003e stringResource(R.string.needs_permissions)\n        connectionState is ConnectionState.Failed -\u003e stringResource(R.string.connection_failed)\n        isConnected -\u003e stringResource(R.string.change_device)\n        searchState \u003d\u003d SearchState.Scanning -\u003e stringResource(R.string.scanning)\n        else -\u003e stringResource(R.string.select_device)\n    }\n\n    val requiredPermissions \u003d listOf(\n        Manifest.permission.BLUETOOTH_SCAN,\n        Manifest.permission.BLUETOOTH_CONNECT\n    )\n    val context \u003d androidx.compose.ui.platform.LocalContext.current\n    val hasAllPermissions \u003d requiredPermissions.all { perm -\u003e\n        androidx.core.content.ContextCompat.checkSelfPermission(context,\n            perm) \u003d\u003d PackageManager.PERMISSION_GRANTED\n    }\n\n\n    val permissionLauncher \u003d rememberLauncherForActivityResult(\n\n        ActivityResultContracts.RequestMultiplePermissions()\n\n    ) { perms -\u003e\n        if (perms.all { it.value }) {\n            viewModel.startScanning()\n            showDeviceList \u003d true\n        }\n    }\n\n    ExtendedFloatingActionButton(\n        onClick \u003d {\n            when {\n                !hasAllPermissions -\u003e {\n                    permissionLauncher.launch(requiredPermissions.toTypedArray())\n                }\n                connectionState is ConnectionState.Failed -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n                isConnected -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.stopScanning()\n                    showDeviceList \u003d true\n                }\n                searchState !\u003d SearchState.Scanning -\u003e {\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n            }\n        },\n        icon \u003d {\n            if (searchState \u003d\u003d SearchState.Scanning) {\n                CircularProgressIndicator(modifier \u003d Modifier.size(24.dp))\n            } else {\n                fabIcon?.let { Icon(it, \&quot;Device Control\&quot;) }\n            }\n        },\n        text \u003d { Text(fabText) },\n        expanded \u003d !isConnected,\n        containerColor \u003d containerColor,\n        contentColor \u003d MaterialTheme.colorScheme.onPrimary\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\n2025-02-18 16:03:08.759 25266-25266 Choreographer           com.denior.motus                     I  Skipped 101 frames!  The application may be doing too much work on its main thread.\n\u003c/user_query\u003e&quot;}]}" />
        <entry key="5fd96851-26a5-49f3-ae5b-945d9b1e811f" value="{&quot;id&quot;:&quot;5fd96851-26a5-49f3-ae5b-945d9b1e811f&quot;,&quot;name&quot;:&quot;Smart Value List Selection for ControlScreen&quot;,&quot;timestamp&quot;:1739877981675,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            values \u003d listOf(-360f, -180f, 180f, 360f),\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nЯ хочу чтобы эти списки значений выбиралисб каким-то умным способом\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Я предлагаю создать отдельные константы для этих значений и добавить логику их генерации. Вот обновленный код:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n// ... existing code ...\n\nprivate object MotorControlConstants {\n    // Скорость\n    const val MIN_SPEED \u003d 0f\n    const val MAX_SPEED \u003d 60f\n    const val RECOMMENDED_SPEED \u003d 19f\n    \n    val speedPresets \u003d buildList {\n        add(15f) // Минимальная комфортная скорость\n        add(RECOMMENDED_SPEED) // Рекомендуемая скорость\n        add(30f) // Средняя скорость\n        add(45f) // Высокая скорость\n        add(MAX_SPEED) // Максимальная скорость\n    }\n\n    // Угол\n    const val MIN_ANGLE \u003d -360f\n    const val MAX_ANGLE \u003d 360f\n    \n    val anglePresets \u003d buildList {\n        val step \u003d 180f\n        var current \u003d MIN_ANGLE\n        while (current \u003c\u003d MAX_ANGLE) {\n            add(current)\n            current +\u003d step\n        }\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n) {\n    Column(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        // ... existing code ...\n        \n        ValueSelectorButtonRow(\n            onValueChanged \u003d onRpmChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d MotorControlConstants.speedPresets,\n            isRecommended \u003d MotorControlConstants.RECOMMENDED_SPEED,\n            // ... rest of the parameters\n        )\n        \n        // ... existing code ...\n        \n        ValueSelectorButtonRow(\n            onValueChanged \u003d onAngleChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d MotorControlConstants.anglePresets,\n            // ... rest of the parameters\n        )\n        \n        // ... existing code ...\n    }\n}\n```\n\nИзменения включают:\n\n1. Создание объекта `MotorControlConstants` для хранения всех констант и пресетов\n2. Для скорости:\n   - Определены константы MIN_SPEED, MAX_SPEED и RECOMMENDED_SPEED\n   - Список пресетов создается с логическим обоснованием каждого значения\n3. Для угла:\n   - Определены константы MIN_ANGLE и MAX_ANGLE\n   - Список пресетов генерируется программно с шагом 180 градусов\n\nТеперь значения централизованы и их легче поддерживать. При необходимости можно легко изменить логику генерации пресетов или добавить новые значения.\n\nТакже можно добавить более сложную логику генерации пресетов, например:\n- Для скорости: генерировать значения на основе процентов от максимальной скорости\n- Для угла: добавить промежуточные значения или изменить шаг\n- Добавить валидацию значений\n- Добавить зависимость от характеристик конкретного устройства\n\nХотите, чтобы я показал какие-либо из этих дополнительных вариантов?&quot;}]}" />
        <entry key="6266f323-c74c-474a-9b8c-84418451ea9a" value="{&quot;id&quot;:&quot;6266f323-c74c-474a-9b8c-84418451ea9a&quot;,&quot;name&quot;:&quot;Adjusting MotusViewModel for Conditional Enablement and BLE Command Sending&quot;,&quot;timestamp&quot;:1739878372954,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(1f, 60f)\n            val newCommand \u003d MotorCommand(\n                targetAngle \u003d _motorState.value.angle.toInt(),\n                rpm \u003d clampedRpm.toInt()\n            )\n            try {\n                sendMotorCommand(newCommand)\n                _motorState.update { it.copy(rpm \u003d clampedRpm) }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor speed: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nНужно сделать две вещи\n1. Пока  не выбрана скорость AngleControlSlider  и ValueSelectorRow(onValueChanged \u003d onAngleChanged должны быть !enabled\n2. команда BLE должна отправляться только с выбором угла\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Я помогу внести необходимые изменения. Давайте разберем их по порядку:\n\n1. Сначала изменим `MotorControl`, чтобы контролы угла были отключены, пока скорость равна 0:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n) {\n    // Угловые контролы должны быть активны только если выбрана скорость (rpm \u003e 0)\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        // ... existing code ...\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled, // Используем новую переменную\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged,\n                isEnabled \u003d isAngleControlEnabled, // Используем новую переменную\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n```\n\n2. Теперь изменим ViewModel, чтобы команды отправлялись только при изменении угла:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\nfun setMotorSpeed(rpm: Float) {\n    viewModelScope.launch {\n        val clampedRpm \u003d rpm.coerceIn(0f, 60f)\n        _motorState.update { it.copy(rpm \u003d clampedRpm) }\n    }\n}\n\nfun setMotorAngle(degrees: Float) {\n    viewModelScope.launch {\n        _motorState.update { currentState -\u003e\n            val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n            val newCommand \u003d MotorCommand(\n                targetAngle \u003d clampedAngle.toInt(),\n                rpm \u003d currentState.rpm.toInt()\n            )\n            try {\n                sendMotorCommand(newCommand)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n            }\n            currentState.copy(angle \u003d clampedAngle)\n        }\n    }\n}\n```\n\nОсновные изменения:\n1. Добавлена проверка `rpm \u003e 0` для активации контролов угла\n2. В методе `setMotorSpeed` теперь только обновляется состояние без отправки команды\n3. Команда отправляется только в методе `setMotorAngle`\n4. Минимальное значение rpm изменено с 1f на 0f для возможности полностью остановить мотор\n\nЭти изменения обеспечат, что:\n- Контролы угла будут неактивны, пока не выбрана скорость\n- BLE команды будут отправляться только при изменении угла\n- Скорость можно установить в 0&quot;}]}" />
        <entry key="67ed2bef-f637-4a95-b14d-9f82e9250b57" value="{&quot;id&quot;:&quot;67ed2bef-f637-4a95-b14d-9f82e9250b57&quot;,&quot;name&quot;:&quot;Adding Tests for MotorCommand ByteArray Conversion&quot;,&quot;timestamp&quot;:1739880764022,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/data/model/MotorCommand.kt\n```kotlin:app/src/main/java/com/denior/motus/data/model/MotorCommand.kt\npackage com.denior.motus.data.model\n\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\ndata class MotorCommand(\n    val targetAngle: Int,   // 32-bit signed integer (-360 to 360)\n    val rpm: Int            // 16-bit unsigned integer (1-60)\n) {\n    fun toByteArray(): ByteArray {\n        return ByteBuffer.allocate(6)  // 4 bytes angle + 2 bytes RPM\n            .order(ByteOrder.LITTLE_ENDIAN)\n            .putInt(targetAngle.coerceIn(-360, 360))\n            .putShort(rpm.coerceIn(0, 60).toShort()) \n            .array()\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nнужно больше тестов на определение совпадают ли те байты, которые отправляются с теми значениями из которых они переводятся\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Вот пример, как можно добавить дополнительный тест на совпадение «сырых» байт с ожидаемыми значениями. Он проверяет, что конкретные входные данные (например, угол в 360 и RPM равный 60) дают именно ту последовательность байтов, которую мы ожидаем (с учётом little-endian и ограничений в коде):\n\n```kotlin:app/src/test/java/com/denior/motus/ExampleUnitTest.kt\n// ... existing code ...\n@Test\nfun `test exact byte representation`() {\n    val command \u003d MotorCommand(360, 60)\n    val actualBytes \u003d command.toByteArray()\n    val expectedBytes \u003d byteArrayOf(0x68, 0x01, 0x00, 0x00, 0x3C, 0x00) \n    // 360 \u003d 0x0168 (little-endian -\u003e 0x68, 0x01, 0x00, 0x00)\n    // 60   \u003d 0x3C (little-endian -\u003e 0x3C, 0x00)\n\n    assertArrayEquals(\n        \&quot;Должны совпадать все байты, включая порядок байтов (little-endian)\&quot;,\n        expectedBytes, \n        actualBytes\n    )\n}\n// ... existing code ...\n```\n\nВ этом тесте мы заранее прописываем ожидаемый массив байтов и сравниваем его с результатом вызова toByteArray(). Аналогичным образом можно добавить несколько подобных тестов с разными парами входных значений (включая крайние случаи вроде -360 или 0) и убедиться, что «сырые» байты совпадают с ожидаемыми.&quot;},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/data/model/MotorCommand.kt\n```kotlin:app/src/main/java/com/denior/motus/data/model/MotorCommand.kt\npackage com.denior.motus.data.model\n\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\ndata class MotorCommand(\n    val targetAngle: Int,   // 32-bit signed integer (-360 to 360)\n    val rpm: Int            // 16-bit unsigned integer (1-60)\n) {\n    fun toByteArray(): ByteArray {\n        return ByteBuffer.allocate(6)  // 4 bytes angle + 2 bytes RPM\n            .order(ByteOrder.LITTLE_ENDIAN)\n            .putInt(targetAngle.coerceIn(-360, 360))\n            .putShort(rpm.coerceIn(0, 60).toShort()) \n            .array()\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nа еще нужны минусовые значения углов, угол ноль и скорость ноль \n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/data/model/MotorCommand.kt\n```kotlin:app/src/main/java/com/denior/motus/data/model/MotorCommand.kt\npackage com.denior.motus.data.model\n\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\ndata class MotorCommand(\n    val targetAngle: Int,   // 32-bit signed integer (-360 to 360)\n    val rpm: Int            // 16-bit unsigned integer (1-60)\n) {\n    fun toByteArray(): ByteArray {\n        return ByteBuffer.allocate(6)  // 4 bytes angle + 2 bytes RPM\n            .order(ByteOrder.LITTLE_ENDIAN)\n            .putInt(targetAngle.coerceIn(-360, 360))\n            .putShort(rpm.coerceIn(0, 60).toShort()) \n            .array()\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(0f, 60f)\n            _motorState.update { it.copy(rpm \u003d clampedRpm) }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String \u003d targetDeviceAddress) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/test/java/com/denior/motus/ExampleUnitTest.kt\n```kotlin:app/src/test/java/com/denior/motus/ExampleUnitTest.kt\npackage com.denior.motus\n\nimport com.denior.motus.data.model.MotorCommand\nimport org.junit.Assert.assertArrayEquals\nimport org.junit.Assert.assertEquals\nimport org.junit.Test\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\nclass MotorCommandTest {\n\n    @Test\n    fun `test MotorCommand toByteArray and parse back`() {\n        val commandsToTest \u003d listOf(\n            MotorCommand(targetAngle \u003d 0, rpm \u003d 0),\n            MotorCommand(targetAngle \u003d 360, rpm \u003d 60),\n            MotorCommand(targetAngle \u003d -360, rpm \u003d 1),\n            MotorCommand(targetAngle \u003d 500, rpm \u003d 70),\n            MotorCommand(targetAngle \u003d -999, rpm \u003d -10)\n        )\n\n        commandsToTest.forEach { cmd -\u003e\n            val bytes \u003d cmd.toByteArray()\n\n            val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n            val angleBack \u003d buffer.int\n            val rpmBack \u003d buffer.short.toInt()\n\n            val expectedAngle \u003d cmd.targetAngle.coerceIn(-360, 360)\n            val expectedRpm \u003d cmd.rpm.coerceIn(0, 60)\n\n            assertEquals(\&quot;Angle должен быть в пределах [-360..360]\&quot;, expectedAngle, angleBack)\n            assertEquals(\&quot;RPM должен быть в пределах [0..60]\&quot;, expectedRpm, rpmBack)\n        }\n    }\n\n    @Test\n    fun `test exact byte representation`() {\n        val command \u003d MotorCommand(360, 60)\n        val actualBytes \u003d command.toByteArray()\n        val expectedBytes \u003d byteArrayOf(0x68, 0x01, 0x00, 0x00, 0x3C, 0x00) \n        // 360 \u003d 0x0168 (little-endian -\u003e 0x68, 0x01, 0x00, 0x00)\n        // 60   \u003d 0x3C (little-endian -\u003e 0x3C, 0x00)\n\n        assertArrayEquals(\n            \&quot;Должны совпадать все байты, включая порядок байтов (little-endian)\&quot;,\n            expectedBytes, \n            actualBytes\n        )\n    }\n\n    @Test\n    fun `test negative angle exact byte representation`() {\n        val command \u003d MotorCommand(-360, 0)\n        val actualBytes \u003d command.toByteArray()\n\n        // -360 в 32-битном представлении (two\u0027s complement) -\u003e 0xFFFFFE98 (little-endian -\u003e 0x98, 0xFE, 0xFF, 0xFF)\n        // 0 в 16-битном представлении (little-endian -\u003e 0x00, 0x00)\n        val expectedBytes \u003d byteArrayOf(\n            0x98.toByte(), 0xFE.toByte(), 0xFF.toByte(), 0xFF.toByte(),\n            0x00, 0x00\n        )\n\n        assertArrayEquals(\n            \&quot;Неверная сериализация для -360 градусов и скорости 0\&quot;,\n            expectedBytes,\n            actualBytes\n        )\n    }\n\n    @Test\n    fun `test zero angle and zero rpm exact byte representation`() {\n        val command \u003d MotorCommand(0, 0)\n        val actualBytes \u003d command.toByteArray()\n\n        // 0 в 32-битном представлении -\u003e 0x00000000 (little-endian -\u003e 0x00, 0x00, 0x00, 0x00)\n        // 0 в 16-битном представлении -\u003e 0x0000 (little-endian -\u003e 0x00, 0x00)\n        val expectedBytes \u003d byteArrayOf(\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00\n        )\n\n        assertArrayEquals(\n            \&quot;Неверная сериализация для 0 градусов и скорости 0\&quot;,\n            expectedBytes,\n            actualBytes\n        )\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Wallpapers\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            Column(\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n                modifier \u003d Modifier.fillMaxWidth()\n            ) {\n                OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n            }\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onRpmChanged,\n                isEnabled \u003d isEnabled,\n                values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n                isRecommended \u003d 19f,\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set minimum speed\&quot;\n                        60f -\u003e \&quot;Set maximum speed\&quot;\n                        else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n                    }\n                }\n            )\n        }\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled,\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged, isEnabled \u003d isAngleControlEnabled,\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(\n    device \u003d \&quot;spec:width\u003d1440px,height\u003d3360px,dpi\u003d640,orientation\u003dlandscape\&quot;, locale \u003d \&quot;uk\&quot;,\n    showSystemUi \u003d false, showBackground \u003d true, wallpaper \u003d Wallpapers.GREEN_DOMINATED_EXAMPLE\n)\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nвот как обрабатывает значения сторона куда передаются данные\n#include \u003cstdio.h\u003e\n#include \&quot;freertos/FreeRTOS.h\&quot;\n#include \&quot;freertos/task.h\&quot;\n#include \&quot;driver/gpio.h\&quot;\n#include \&quot;esp_log.h\&quot;\n#include \&quot;stepper.h\&quot;\n#include \&quot;esp_timer.h\&quot;\n#include \&quot;sdkconfig.h\&quot;\n\n#define STEPPER_IN1 GPIO_NUM_8\n#define STEPPER_IN2 GPIO_NUM_9\n#define STEPPER_IN3 GPIO_NUM_10\n#define STEPPER_IN4 GPIO_NUM_18\n\n#define STEPS_PER_REV 4096\n\n#define MIN_DELAY_MS 1\n\nstatic float current_angle \u003d 0;\n\n// Initialize GPIO pins for stepper motor\nvoid stepper_init(void) {\n    gpio_config_t io_conf \u003d {\n        .intr_type \u003d GPIO_INTR_DISABLE,\n        .mode \u003d GPIO_MODE_OUTPUT,\n        .pin_bit_mask \u003d (1ULL \u003c\u003c STEPPER_IN1) | (1ULL \u003c\u003c STEPPER_IN2) |\n                        (1ULL \u003c\u003c STEPPER_IN3) | (1ULL \u003c\u003c STEPPER_IN4),\n        .pull_down_en \u003d 0,\n        .pull_up_en \u003d 0\n    };\n    gpio_config(\u0026io_conf);\n}\n\n// Delay function using vTaskDelay for precise timing\nstatic void delay_us(uint32_t us) {\n    if (us \u003c 1000) {  // Less than 1ms\n        esp_rom_delay_us(us);\n    } else {\n        // Convert to ticks using portTICK_PERIOD_MS instead of CONFIG_FREERTOS_HZ\n        const TickType_t xDelay \u003d (us / 1000) / portTICK_PERIOD_MS;\n        vTaskDelay(xDelay ? xDelay : 1);\n    }\n}\n\n// Set stepper motor speed in RPM\nstatic void stepper_set_rpm(int rpm) {\n    if (rpm \u003c\u003d 0 || rpm \u003e 60) {\n        return;\n    }\n    uint32_t us_delay \u003d 60000000 / STEPS_PER_REV / rpm;\n    delay_us(us_delay);\n}\n\n// Half-step drive sequence\nstatic void stepper_half_drive(int step) {\n    const int gpio_states[8][4] \u003d {\n        {1, 0, 0, 0},\n        {1, 1, 0, 0},\n        {0, 1, 0, 0},\n        {0, 1, 1, 0},\n        {0, 0, 1, 0},\n        {0, 0, 1, 1},\n        {0, 0, 0, 1},\n        {1, 0, 0, 1}\n    };\n\n    gpio_set_level(STEPPER_IN1, gpio_states[step][0]);\n    gpio_set_level(STEPPER_IN2, gpio_states[step][1]);\n    gpio_set_level(STEPPER_IN3, gpio_states[step][2]);\n    gpio_set_level(STEPPER_IN4, gpio_states[step][3]);\n}\n\n// Rotate stepper motor by specified angle\nvoid stepper_step_angle(float angle, int direction, int rpm) {\n    float angle_per_sequence \u003d 0.703125;\n    int number_of_sequences \u003d (int)(angle/angle_per_sequence);\n\n    for (int seq \u003d 0; seq \u003c number_of_sequences; seq++) {\n        if (direction \u003d\u003d 0) {  // Clockwise\n            for (int step \u003d 7; step \u003e\u003d 0; step--) {\n                stepper_half_drive(step);\n                stepper_set_rpm(rpm);\n            }\n        } else {  // Counter-clockwise\n            for (int step \u003d 0; step \u003c\u003d 7; step++) {\n                stepper_half_drive(step);\n                stepper_set_rpm(rpm);\n            }\n        }\n    }\n}\n\nvoid stepper_rotate(int angle, int rpm) {\n    int change_in_angle \u003d angle - current_angle;\n    \n    if (change_in_angle \u003e\u003d 0.71) {  // Clockwise\n        stepper_step_angle(change_in_angle, 0, rpm);\n        current_angle \u003d angle;\n    } else if (change_in_angle \u003c\u003d -0.71) { \n        change_in_angle \u003d -change_in_angle;\n        stepper_step_angle(change_in_angle, 1, rpm);\n        current_angle \u003d angle;\n    }\n}\n\n\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Понял, давайте добавим тесты, которые проверят граничные и нулевые значения с учетом того, как их обрабатывает ESP32:\n\n```kotlin:app/src/test/java/com/denior/motus/ExampleUnitTest.kt\n@Test\nfun `test boundary and zero values byte representation`() {\n    // Проверяем все граничные случаи\n    val testCases \u003d listOf(\n        TestCase(\n            command \u003d MotorCommand(0, 0),\n            expectedBytes \u003d byteArrayOf(0x00, 0x00, 0x00, 0x00, 0x00, 0x00),\n            description \u003d \&quot;Нулевой угол и нулевая скорость\&quot;\n        ),\n        TestCase(\n            command \u003d MotorCommand(-360, 1),\n            expectedBytes \u003d byteArrayOf(0x98.toByte(), 0xFE.toByte(), 0xFF.toByte(), 0xFF.toByte(), 0x01, 0x00),\n            description \u003d \&quot;Минимальный угол и минимальная разрешенная скорость\&quot;\n        ),\n        TestCase(\n            command \u003d MotorCommand(360, 60),\n            expectedBytes \u003d byteArrayOf(0x68, 0x01, 0x00, 0x00, 0x3C, 0x00),\n            description \u003d \&quot;Максимальный угол и максимальная скорость\&quot;\n        ),\n        TestCase(\n            command \u003d MotorCommand(-1, 30),\n            expectedBytes \u003d byteArrayOf(0xFF.toByte(), 0xFF.toByte(), 0xFF.toByte(), 0xFF.toByte(), 0x1E, 0x00),\n            description \u003d \&quot;Отрицательный угол близкий к нулю\&quot;\n        ),\n        TestCase(\n            command \u003d MotorCommand(1, 30),\n            expectedBytes \u003d byteArrayOf(0x01, 0x00, 0x00, 0x00, 0x1E, 0x00),\n            description \u003d \&quot;Положительный угол близкий к нулю\&quot;\n        )\n    )\n\n    testCases.forEach { testCase -\u003e\n        val actualBytes \u003d testCase.command.toByteArray()\n        \n        assertArrayEquals(\n            \&quot;Ошибка для случая: ${testCase.description}\&quot;,\n            testCase.expectedBytes,\n            actualBytes\n        )\n    }\n}\n\nprivate data class TestCase(\n    val command: MotorCommand,\n    val expectedBytes: ByteArray,\n    val description: String\n) {\n    // Переопределяем equals для корректного сравнения ByteArray\n    override fun equals(other: Any?): Boolean {\n        if (this \u003d\u003d\u003d other) return true\n        if (javaClass !\u003d other?.javaClass) return false\n        other as TestCase\n        return command \u003d\u003d other.command \u0026\u0026\n                expectedBytes.contentEquals(other.expectedBytes) \u0026\u0026\n                description \u003d\u003d other.description\n    }\n\n    override fun hashCode(): Int {\n        var result \u003d command.hashCode()\n        result \u003d 31 * result + expectedBytes.contentHashCode()\n        result \u003d 31 * result + description.hashCode()\n        return result\n    }\n}\n```\n\nЭтот тест:\n1. Проверяет нулевые значения (0°, 0 RPM)\n2. Проверяет минимальные допустимые значения (-360°, 1 RPM)\n3. Проверяет максимальные значения (360°, 60 RPM)\n4. Проверяет значения близкие к нулю с обеих сторон (-1° и 1°)\n\nКаждый тестовый случай проверяет точное байтовое представление, учитывая:\n- Little-endian представление\n- 32-битное представление для угла (4 байта)\n- 16-битное представление для скорости (2 байта)\n- Two\u0027s complement для отрицательных чисел\n\nЭто поможет убедиться, что данные передаются в формате, который ожидает ESP32.&quot;}]}" />
        <entry key="773170f7-f06e-4dc4-9b79-e5438603b0b6" value="{&quot;id&quot;:&quot;773170f7-f06e-4dc4-9b79-e5438603b0b6&quot;,&quot;name&quot;:&quot;Dynamic Value Selection for Control Screen&quot;,&quot;timestamp&quot;:1739877285868,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nя хочу чтобы этот список значений выбирался каким-то умным образом\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Я вижу, что вы хотите сделать более интеллектуальный подход к выбору значений для кнопок управления скоростью. Вот несколько предложений:\n\n1. Можно создать вычисляемые значения на основе диапазона:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n) {\n    // ... existing code ...\n    \n    val speedValues \u003d remember {\n        calculateSpeedValues(minSpeed \u003d 0f, maxSpeed \u003d 60f, count \u003d 5)\n    }\n    \n    ValueSelectorButtonRow(\n        onValueChanged \u003d onRpmChanged,\n        isEnabled \u003d isEnabled,\n        values \u003d speedValues,\n        isRecommended \u003d 19f,\n        contentDescriptionForParameter \u003d { float -\u003e\n            when (float) {\n                0f -\u003e \&quot;Set minimum speed\&quot;\n                60f -\u003e \&quot;Set maximum speed\&quot;\n                else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n            }\n        }\n    )\n    \n    // ... rest of the code ...\n}\n\nprivate fun calculateSpeedValues(minSpeed: Float, maxSpeed: Float, count: Int): List\u003cFloat\u003e {\n    val step \u003d (maxSpeed - minSpeed) / (count - 1)\n    return List(count) { index -\u003e\n        // Округляем до ближайшего целого для более красивых чисел\n        round(minSpeed + (step * index))\n    }\n}\n```\n\nЭтот подход имеет несколько преимуществ:\n1. Значения распределяются равномерно по всему диапазону\n2. Количество кнопок легко изменить, изменив параметр `count`\n3. При изменении диапазона скоростей (minSpeed/maxSpeed) значения автоматически пересчитаются\n\nАльтернативно, можно использовать логарифмическую или экспоненциальную шкалу для неравномерного распределения значений, если это больше подходит для вашего случая. Например:\n\n```kotlin\nprivate fun calculateSpeedValues(minSpeed: Float, maxSpeed: Float, count: Int): List\u003cFloat\u003e {\n    return List(count) { index -\u003e\n        val factor \u003d index.toFloat() / (count - 1)\n        // Экспоненциальное распределение даст больше значений в начале диапазона\n        val value \u003d minSpeed + (maxSpeed - minSpeed) * (factor * factor)\n        round(value)\n    }\n}\n```\n\nКакой подход вы предпочитаете? Я могу предложить и другие варианты распределения значений в зависимости от ваших конкретных потребностей.&quot;}]}" />
        <entry key="77f362c0-8c34-42e8-a6e1-8b80db2cf5bf" value="{&quot;id&quot;:&quot;77f362c0-8c34-42e8-a6e1-8b80db2cf5bf&quot;,&quot;name&quot;:&quot;Dynamic Value List Selection in Kotlin&quot;,&quot;timestamp&quot;:1739877935850,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            values \u003d listOf(-360f, -180f, 180f, 360f),\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nЯ хочу чтобы эти списки значений выбиралисб каким-то умным способом\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Ниже приведён пример, как можно передать динамические списки значений вместо жёстко заданных. Допустим, у вас есть в ViewModel логика, которая вычисляет рекомендованные значения для скорости и угла. Тогда вы можете использовать их примерно так:\n\nОбратите внимание, что я показываю только места, где значения списков меняются на динамические — остальной код сокращён для наглядности.\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n// ... существующий код ...\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n) {\n    // Предположим, что у вас есть какие-то динамические списки, полученные из ViewModel:\n    val recommendedSpeedValues \u003d listOf(15f, 19f, 30f, 45f, 60f) // или viewModel.getRecommendedSpeeds()\n    val recommendedAngleValues \u003d listOf(-360f, -180f, 180f, 360f) // или viewModel.getRecommendedAngles()\n\n    Column(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        // ... существующий код ...\n\n        ValueSelectorButtonRow(\n            onValueChanged \u003d onRpmChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d recommendedSpeedValues,\n            isRecommended \u003d 19f,\n            contentDescriptionForParameter \u003d { float -\u003e\n                // ... существующая логика ...\n            }\n        )\n\n        // ... существующий код ...\n\n        ValueSelectorButtonRow(\n            onValueChanged \u003d onAngleChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d recommendedAngleValues,\n            contentDescriptionForParameter \u003d { float -\u003e\n                // ... существующая логика ...\n            }\n        )\n\n        // ... существующий код ...\n    }\n}\n// ... существующий код ...\n```\n\nТаким образом, вместо фиксированных списков вы можете организовать «умное» вычисление значений, например, в ViewModel или в отдельном классе. При этом “умный” способ может означать подгрузку данных из сети, использование различных параметров пользователя (например, уровень подготовки) или вычисления на основании датчиков. Если же списки нужны исключительно как пример, вы всегда можете использовать их напрямую из ViewModel или другого источника, чтобы скрыть «магические» числа из пользовательского интерфейса.&quot;}]}" />
        <entry key="79e2d403-185b-4675-bba9-d3f7a4b759b2" value="{&quot;id&quot;:&quot;79e2d403-185b-4675-bba9-d3f7a4b759b2&quot;,&quot;name&quot;:&quot;Motus App Development Discussion&quot;,&quot;timestamp&quot;:1739879041698,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            Column(\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n                modifier \u003d Modifier.fillMaxWidth()\n            ) {\n                OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n            }\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onRpmChanged,\n                isEnabled \u003d isEnabled,\n                values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n                isRecommended \u003d 19f,\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set minimum speed\&quot;\n                        60f -\u003e \&quot;Set maximum speed\&quot;\n                        else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n                    }\n                }\n            )\n        }\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled,\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged, isEnabled \u003d isAngleControlEnabled,\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(0f, 60f)\n            _motorState.update { it.copy(rpm \u003d clampedRpm) }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String \u003d targetDeviceAddress) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nкакие еще есть идеи?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Вот несколько идей, которые можно рассмотреть для дальнейшего развития приложения:\n\n1. Добавить анимацию при изменении значений угла и скорости. Например, при прокрутке слайдера или нажатии на кнопки скорости/угла можно включать плавное движение самой ручки-индикатора (если дизайнерская концепция это позволяет).\n\n2. Сохранять историю измененийRPM и угла, чтобы пользователь мог просматривать недавние значения. Можно сделать небольшой лог (например, на основе Room или другой базы данных), и отображать последние несколько изменений где-нибудь внизу экрана или на отдельном экране.\n\n3. Внедрить разные профили. Может быть сценарий «Тихий» для уменьшенной скорости и более плавных углов, или «Максимальный» для самых высоких показателей. Профили легко выбирать нажатием одной кнопки — это упростит использование при повторяющихся задачах.\n\n4. Предусмотреть автоматический возврат к «нулевому» положению угла после остановки. Так пользователь сможет быстро вернуться к исходному состоянию, не меняя слайдер вручную.\n\n5. Добавить возможность «калибровки» устройства. Если у двигателя есть погрешность в реальных измерениях угла или скорости, можно реализовать экраны настройки, где пользователь вносит коррекции (компенсацию) в прошивку или в само приложение.\n\n6. Отображать текущее состояние батареи или напряжения (если такое доступно по Bluetooth). Важно, если вы хотите, чтобы пользователь знал, насколько безопасно сейчас запускать двигатель.\n\n7. Реализовать уведомления или предупреждения, если устройство отключается неожиданно или если достигнуты какие-то ограничивающие условия (например, угол слишком большой).\n\nКаждая из этих идей может расширить функционал и сделать взаимодействие с устройством удобнее и нагляднее.&quot;}]}" />
        <entry key="82341e4b-d103-4896-a5dd-f27e96d3e422" value="{&quot;id&quot;:&quot;82341e4b-d103-4896-a5dd-f27e96d3e422&quot;,&quot;name&quot;:&quot;Choosing Fonts for Motus App&quot;,&quot;timestamp&quot;:1739888027201,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/theme/Type.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/theme/Type.kt\npackage com.denior.motus.ui.theme\n\nimport androidx.compose.material3.Typography\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.googlefonts.Font\nimport androidx.compose.ui.text.googlefonts.GoogleFont\nimport com.denior.motus.R\n\nval provider \u003d GoogleFont.Provider(\n    providerAuthority \u003d \&quot;com.google.android.gms.fonts\&quot;,\n    providerPackage \u003d \&quot;com.google.android.gms\&quot;,\n    certificates \u003d R.array.com_google_android_gms_fonts_certs\n)\n\nval bodyFontFamily \u003d FontFamily(\n    Font(\n        googleFont \u003d GoogleFont(\&quot;Roboto Mono\&quot;),\n        fontProvider \u003d provider,\n    )\n)\n\nval displayFontFamily \u003d FontFamily(\n    Font(\n        googleFont \u003d GoogleFont(\&quot;Inter\&quot;),\n        fontProvider \u003d provider,\n    )\n)\n\nval baseline \u003d Typography()\n\nval AppTypography \u003d Typography(\n    displayLarge \u003d baseline.displayLarge.copy(fontFamily \u003d displayFontFamily),\n    displayMedium \u003d baseline.displayMedium.copy(fontFamily \u003d displayFontFamily),\n    displaySmall \u003d baseline.displaySmall.copy(fontFamily \u003d displayFontFamily),\n    headlineLarge \u003d baseline.headlineLarge.copy(fontFamily \u003d displayFontFamily),\n    headlineMedium \u003d baseline.headlineMedium.copy(fontFamily \u003d displayFontFamily),\n    headlineSmall \u003d baseline.headlineSmall.copy(fontFamily \u003d displayFontFamily),\n    titleLarge \u003d baseline.titleLarge.copy(fontFamily \u003d displayFontFamily),\n    titleMedium \u003d baseline.titleMedium.copy(fontFamily \u003d displayFontFamily),\n    titleSmall \u003d baseline.titleSmall.copy(fontFamily \u003d displayFontFamily),\n    bodyLarge \u003d baseline.bodyLarge.copy(fontFamily \u003d bodyFontFamily),\n    bodyMedium \u003d baseline.bodyMedium.copy(fontFamily \u003d bodyFontFamily),\n    bodySmall \u003d baseline.bodySmall.copy(fontFamily \u003d bodyFontFamily),\n    labelLarge \u003d baseline.labelLarge.copy(fontFamily \u003d bodyFontFamily),\n    labelMedium \u003d baseline.labelMedium.copy(fontFamily \u003d bodyFontFamily),\n    labelSmall \u003d baseline.labelSmall.copy(fontFamily \u003d bodyFontFamily),\n)\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Wallpapers\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            Column(\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n                modifier \u003d Modifier.fillMaxWidth()\n            ) {\n                OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n            }\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onRpmChanged,\n                isEnabled \u003d isEnabled,\n                values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n                isRecommended \u003d 19f,\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set minimum speed\&quot;\n                        60f -\u003e \&quot;Set maximum speed\&quot;\n                        else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n                    }\n                }\n            )\n        }\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled,\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged, isEnabled \u003d isAngleControlEnabled,\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(\n    device \u003d \&quot;spec:width\u003d1440px,height\u003d3360px,dpi\u003d640,orientation\u003dlandscape\&quot;, locale \u003d \&quot;uk\&quot;,\n    showSystemUi \u003d false, showBackground \u003d true, wallpaper \u003d Wallpapers.GREEN_DOMINATED_EXAMPLE\n)\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(0f, 60f)\n            _motorState.update { it.copy(rpm \u003d clampedRpm) }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String \u003d targetDeviceAddress) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\npackage com.denior.motus.ui.component\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.FilledIconButton\nimport androidx.compose.material3.FilledTonalIconButton\nimport androidx.compose.material3.IconButtonDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\n\n@Composable\nfun ValueSelectorButtonRow(\n    isEnabled: Boolean,\n    onValueChanged: (Float) -\u003e Unit,\n    values: List\u003cFloat\u003e,\n    isRecommended: Float? \u003d null,\n    contentDescriptionForParameter: (Float) -\u003e String\n) {\n    Row(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n    ) {\n        values.forEachIndexed { index, value -\u003e\n            val isFirst \u003d index \u003d\u003d 0\n            val isLast \u003d index \u003d\u003d values.size - 1\n\n            val shape \u003d when {\n                isFirst -\u003e RoundedCornerShape(\n                    topStart \u003d 12.dp, topEnd \u003d 8.dp, bottomStart \u003d 12.dp, bottomEnd \u003d 8.dp\n                )\n\n                isLast -\u003e RoundedCornerShape(\n                    topStart \u003d 8.dp, topEnd \u003d 12.dp, bottomStart \u003d 8.dp, bottomEnd \u003d 12.dp\n                )\n\n                else -\u003e RoundedCornerShape(8.dp)\n            }\n\n            val type \u003d when {\n                isRecommended?.let { it \u003d\u003d value } \u003d\u003d true -\u003e TypesOfConviButs.RECOMMENDED\n                isFirst || isLast -\u003e TypesOfConviButs.PRIMARY\n                else -\u003e TypesOfConviButs.STANDARD\n            }\n\n            ConvenientFABLikeSquareButton(\n                onClick \u003d onValueChanged,\n                value \u003d value,\n                shape \u003d shape,\n                type \u003d type,\n                modifier \u003d Modifier.weight(1f),\n                isEnabled \u003d isEnabled,\n                contentDescription \u003d contentDescriptionForParameter(value)\n\n            )\n        }\n    }\n}\n\nenum class TypesOfConviButs {\n    PRIMARY, RECOMMENDED, STANDARD\n}\n\n@Composable\nfun ConvenientFABLikeSquareButton(\n    isEnabled: Boolean,\n    onClick: (Float) -\u003e Unit,\n    value: Float,\n    type: TypesOfConviButs,\n    shape: Shape,\n    modifier: Modifier \u003d Modifier,\n    contentDescription: String\n) {\n    val buttonModifier \u003d\n        Modifier\n            .semantics { this.contentDescription \u003d contentDescription }\n            .then(modifier)\n    when (type) {\n        TypesOfConviButs.PRIMARY -\u003e FilledIconButton(enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            onClick \u003d { onClick(value) }) {\n            Text(\&quot;${value.toInt()}\&quot;)\n        }\n\n        TypesOfConviButs.STANDARD -\u003e FilledTonalIconButton(enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            onClick \u003d { onClick(value) }) {\n            Text(\&quot;${value.toInt()}\&quot;)\n        }\n\n        TypesOfConviButs.RECOMMENDED -\u003e FilledIconButton(enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            colors \u003d IconButtonDefaults.filledIconButtonColors(\n                containerColor \u003d MaterialTheme.colorScheme.tertiaryContainer,\n                contentColor \u003d MaterialTheme.colorScheme.onTertiaryContainer\n            ),\n            onClick \u003d { onClick(value) }) {\n            Text(\&quot;${value.toInt()}\&quot;)\n        }\n    }\n}\n\n@Composable\n@Preview\nfun RowOfConvenientButtonsPrev() {\n    ValueSelectorButtonRow(isEnabled \u003d true,\n        onValueChanged \u003d { },\n        values \u003d listOf(15f, 19f, 30f, 45f, 60f, 90f),\n        isRecommended \u003d 19f,\n        contentDescriptionForParameter \u003d { float -\u003e\n            when (float) {\n                0f -\u003e \&quot;Set minimum speed\&quot;\n                60f -\u003e \&quot;Set maximum speed\&quot;\n                else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n            }\n        })\n}\n\n@Preview\n@Composable\nfun ConvenientFABLikeSquareButtonPreview() {\n    MaterialTheme {\n        ConvenientFABLikeSquareButton(\n            onClick \u003d {},\n            value \u003d 45f,\n            shape \u003d RoundedCornerShape(12.dp),\n            isEnabled \u003d true,\n            type \u003d TypesOfConviButs.RECOMMENDED,\n            modifier \u003d Modifier,\n            contentDescription \u003d 0.0.toString()\n        )\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nКакие шрифты подойдут для моего приложения исходя из его дизайна и функций и как тебе текущий выбор?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;На мой взгляд, текущая комбинация шрифтов смотрится вполне удачно:  \n• Inter отлично подходит для заголовков и крупных текстовых блоков благодаря хорошей читабельности и современному виду.  \n• Roboto Mono, как моноширинный шрифт, подчёркивает цифры и элементы интерфейса, где важна чёткость и “технический” внешний вид.\n\nЕсли хочется поэкспериментировать с альтернативами:  \n• Для заголовков можно рассмотреть вариации Roboto (например, Roboto Condensed) или Poppins — оба шрифта хорошо масштабируются.  \n• В качестве моноширинного шрифта иногда используют JetBrains Mono — он чуть более “мягкий” и заточен под разработку, но для общего дизайна Roboto Mono может смотреться даже привычнее.  \n• Для разнообразия обычного текстового блока (body) есть Open Sans — это классика для Android-приложений, легко читается на самых разных экранах.  \n\nНо любые изменения в шрифтах лучше примерять на макеты, чтобы увидеть, сохраняется ли читаемость и цельный стиль. Текущий выбор уже хорош для большинства сценариев, так что стоит менять только если есть конкретные задачи (например, улучшить восприятие длинных текстов или подчеркнуть уникальность приложения).  &quot;}]}" />
        <entry key="995bd90e-69ad-4cf2-b108-f0ac2e58a223" value="{&quot;id&quot;:&quot;995bd90e-69ad-4cf2-b108-f0ac2e58a223&quot;,&quot;name&quot;:&quot;Testing and Verifying MotorCommand Byte Representation in Kotlin&quot;,&quot;timestamp&quot;:1739880076156,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/data/model/MotorCommand.kt\n```kotlin:app/src/main/java/com/denior/motus/data/model/MotorCommand.kt\ndata class MotorCommand(\n    val targetAngle: Int,   // 32-bit signed integer (-360 to 360)\n    val rpm: Int            // 16-bit unsigned integer (1-60)\n) {\n    fun toByteArray(): ByteArray {\n        return ByteBuffer.allocate(6)  // 4 bytes angle + 2 bytes RPM\n            .order(ByteOrder.LITTLE_ENDIAN)\n            .putInt(targetAngle.coerceIn(-360, 360))\n            .putShort(rpm.coerceIn(0, 60).toShort()) \n            .array()\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nнам нужно как следует протестировать это. И как-то сделать так, чтобы проверить совпадают ли значения в байтах тем, что они из себя должны являть\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Ниже приведён пример простого юнит-теста на Kotlin, который проверяет, что при преобразовании MotorCommand в массив байтов и обратном считывании значений, мы получаем исходные параметры (с поправкой на их диапазон):\n\n• Тест учитывает границы для targetAngle ([-360; 360]) и для rpm ([0; 60])  \n• Для наглядности показаны несколько вариантов значений (включая граничные)\n\n```kotlin:app/src/test/java/com/denior/motus/data/model/MotorCommandTest.kt\nimport org.junit.Assert.assertEquals\nimport org.junit.Test\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\nclass MotorCommandTest {\n\n    @Test\n    fun `test MotorCommand toByteArray and parse back`() {\n        val commandsToTest \u003d listOf(\n            MotorCommand(targetAngle \u003d 0, rpm \u003d 0),\n            MotorCommand(targetAngle \u003d 360, rpm \u003d 60),\n            MotorCommand(targetAngle \u003d -360, rpm \u003d 1),\n            MotorCommand(targetAngle \u003d 500, rpm \u003d 70),   // за пределами допустимого диапазона\n            MotorCommand(targetAngle \u003d -999, rpm \u003d -10)  // за пределами допустимого диапазона\n        )\n\n        commandsToTest.forEach { cmd -\u003e\n            val bytes \u003d cmd.toByteArray()\n\n            // Считываем значения обратно с помощью ByteBuffer\n            val buffer \u003d ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)\n            val angleBack \u003d buffer.int\n            val rpmBack \u003d buffer.short.toInt()  // short → int\n\n            // Проверяем, что значения совпадают с ожидаемыми\n            val expectedAngle \u003d cmd.targetAngle.coerceIn(-360, 360)\n            val expectedRpm \u003d cmd.rpm.coerceIn(0, 60)\n\n            assertEquals(\&quot;Angle должен быть в пределах [-360..360]\&quot;, expectedAngle, angleBack)\n            assertEquals(\&quot;RPM должен быть в пределах [0..60]\&quot;, expectedRpm, rpmBack)\n        }\n    }\n}\n```\n\nТаким образом вы сможете проверить, что всё, что было записано в байтовый массив, корректно восстанавливается при известном порядке байтов (LITTLE_ENDIAN), и что все граничные условия (выход за пределы -360…360 и 0…60) также обрабатываются корректно.&quot;}]}" />
        <entry key="9dd6f29b-1bf3-4eec-ac39-f02f3f933fa2" value="{&quot;id&quot;:&quot;9dd6f29b-1bf3-4eec-ac39-f02f3f933fa2&quot;,&quot;name&quot;:&quot;Conversation title: Enhancing ConnectionState Enum with Additional States&quot;,&quot;timestamp&quot;:1739878874437,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/DeviFab.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/DeviFab.kt\n@Composable\nfun ConnectionStatusCard(connectionState: ConnectionState) {\n    Card(\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .semantics {\n                contentDescription \u003d \&quot;Motor status: $connectionState\&quot;\n            }, colors \u003d CardDefaults.cardColors(\n            containerColor \u003d MaterialTheme.colorScheme.surfaceVariant\n        )\n    ) {\n        Row(\n            modifier \u003d Modifier\n                .padding(16.dp)\n                .fillMaxWidth(),\n            verticalAlignment \u003d Alignment.CenterVertically,\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Column {\n                Text(\n                    text \u003d stringResource(R.string.motor_status),\n                    style \u003d MaterialTheme.typography.titleMedium\n                )\n                Row(verticalAlignment \u003d Alignment.CenterVertically) {\n                    Icon(\n                        imageVector \u003d if (connectionState is ConnectionState.Connected) Icons.Default.CheckCircle else Icons.Default.Warning,\n                        contentDescription \u003d null,\n\n                        )\n                    Text(\n                        text \u003d when (connectionState) {\n                            is ConnectionState.Connected -\u003e stringResource(R.string.connected_state)\n                            is ConnectionState.Connecting -\u003e stringResource(R.string.connecting)\n                            else -\u003e stringResource(R.string.disconnected_state)\n                        }, modifier \u003d Modifier.padding(start \u003d 8.dp)\n                    )\n                }\n            }\n        }\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nНаверное же должно быть больше состояний, как например отключен и не подключен. Первое означает какую-то ошибку, а второе значение по умолчанию, что думаешь?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Да, разделение состояний на «не подключено» (например, «Idle» или «NotConnected») и «ошибка» (уже есть «Failed») может повысить читаемость кода и упростить обработку разных ситуаций. Например, «NotConnected» (или «Idle») будет сигнализировать о том, что соединение с устройством не установлено по умолчанию, без явной ошибки, а «Failed» будет однозначно указывать на сбой или ошибку при попытке установить соединение.&quot;}]}" />
        <entry key="aa35d09b-594f-4950-979a-55a2d09f7f10" value="{&quot;id&quot;:&quot;aa35d09b-594f-4950-979a-55a2d09f7f10&quot;,&quot;name&quot;:&quot;Using Modifier.padding() in Jetpack Compose&quot;,&quot;timestamp&quot;:1739874805517,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nаргументируй использование Modifier.padding()\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Аргументировать использование Modifier.padding() можно следующим образом:\n\n1. Structuring content (структурирование содержимого):  \n   При добавлении отступов (padding) вокруг элемента обеспечивается чёткая визуальная группировка, а также улучшается читаемость и восприятие интерфейса.  \n\n2. Избегание наложений (избежание пересечений элементов):  \n   Когда несколько элементов размещены рядом, применение Modifier.padding() помогает разделить их, чтобы не было визуального “слипания” элементов.  \n\n3. Гибкость дизайна (адаптивность):  \n   С помощью отступов можно тонко настраивать внешний вид и адаптировать интерфейс под различные размеры экранов и ориентации. Это важно для повышения отзывчивости (responsiveness) приложения.  \n\n4. Управление свободным пространством (организация лейаута):  \n   Часто требуется регулировать внутренние поля кнопки или карты (Card), чтобы подстроить текст или иконки. Modifier.padding() даёт точный контроль над этим пространством.  \n\nВ целом Modifier.padding() — это удобный способ устанавливать внутренние отступы вокруг Compose-элементов и обеспечивать более аккуратный и продуманный пользовательский интерфейс.&quot;}]}" />
        <entry key="b38b6aa4-7399-40bc-b189-289e82cbc192" value="{&quot;id&quot;:&quot;b38b6aa4-7399-40bc-b189-289e82cbc192&quot;,&quot;name&quot;:&quot;File Assistance Needed&quot;,&quot;timestamp&quot;:1739841459564,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nЧто мне елать с этим файлом?\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Этот файл `data_extraction_rules.xml` используется в Android для определения правил резервного копирования и восстановления данных приложения, а также для передачи данных между устройствами.\n\nВам нужно решить, какие данные вашего приложения должны:\n1. Сохраняться в облачной резервной копии (секция `cloud-backup`)\n2. Передаваться при переносе данных на новое устройство (секция `device-transfer`)\n\nВот пример того, как можно настроить этот файл:&quot;,&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;toolu_017SHQPKjt7ibnj2zyMyiiTZ&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;app/src/main/res/xml/data_extraction_rules.xml\&quot;, \&quot;instructions\&quot;: \&quot;I will update the data extraction rules to include shared preferences and exclude cache files.\&quot;, \&quot;code_edit\&quot;: \&quot;\u003c?xml version\u003d\\\&quot;1.0\\\&quot; encoding\u003d\\\&quot;utf-8\\\&quot;?\u003e\\n\u003cdata-extraction-rules\u003e\\n    \u003ccloud-backup\u003e\\n        \u003c!-- Include shared preferences --\u003e\\n        \u003cinclude domain\u003d\\\&quot;sharedpref\\\&quot; path\u003d\\\&quot;.\\\&quot;/\u003e\\n        \u003c!-- Exclude cache files --\u003e\\n        \u003cexclude domain\u003d\\\&quot;file\\\&quot; path\u003d\\\&quot;cache/\\\&quot;/\u003e\\n    \u003c/cloud-backup\u003e\\n    \u003cdevice-transfer\u003e\\n        \u003c!-- Include shared preferences --\u003e\\n        \u003cinclude domain\u003d\\\&quot;sharedpref\\\&quot; path\u003d\\\&quot;.\\\&quot;/\u003e\\n        \u003c!-- Exclude cache files --\u003e\\n        \u003cexclude domain\u003d\\\&quot;file\\\&quot; path\u003d\\\&quot;cache/\\\&quot;/\u003e\\n    \u003c/device-transfer\u003e\\n\u003c/data-extraction-rules\u003e\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;toolu_017SHQPKjt7ibnj2zyMyiiTZ&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -6,13 +6,15 @@\n \u003cdata-extraction-rules\u003e\n     \u003ccloud-backup\u003e\n-        \u003c!-- TODO: Use \u003cinclude\u003e and \u003cexclude\u003e to control what is backed up.\n-        \u003cinclude .../\u003e\n-        \u003cexclude .../\u003e\n-        --\u003e\n+        \u003c!-- Include shared preferences --\u003e\n+        \u003cinclude domain\u003d\&quot;sharedpref\&quot; path\u003d\&quot;.\&quot;/\u003e\n+        \u003c!-- Exclude cache files --\u003e\n+        \u003cexclude domain\u003d\&quot;file\&quot; path\u003d\&quot;cache/\&quot;/\u003e\n     \u003c/cloud-backup\u003e\n     \u003c!--\n     \u003cdevice-transfer\u003e\n-        \u003cinclude .../\u003e\n-        \u003cexclude .../\u003e\n+        \u003c!-- Include shared preferences --\u003e\n+        \u003cinclude domain\u003d\&quot;sharedpref\&quot; path\u003d\&quot;.\&quot;/\u003e\n+        \u003c!-- Exclude cache files --\u003e\n+        \u003cexclude domain\u003d\&quot;file\&quot; path\u003d\&quot;cache/\&quot;/\u003e\n     \u003c/device-transfer\u003e\n     --\u003e\n```&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;\n\nВ этом примере я настроил файл так, чтобы:\n1. Включать в резервную копию все shared preferences (общие настройки приложения)\n2. Исключать кэш-файлы, так как их не нужно сохранять\n\nВы можете изменить эти правила в зависимости от потребностей вашего приложения. Например:\n- Включить определенные файлы: `\u003cinclude domain\u003d\&quot;file\&quot; path\u003d\&quot;documents/\&quot;/\u003e`\n- Включить определенные базы данных: `\u003cinclude domain\u003d\&quot;database\&quot; path\u003d\&quot;mydb.db\&quot;/\u003e`\n- Исключить конфиденциальные данные: `\u003cexclude domain\u003d\&quot;sharedpref\&quot; path\u003d\&quot;sensitive_prefs.xml\&quot;/\u003e`\n\nРаскомментируйте секцию `device-transfer`, если хотите, чтобы эти же правила применялись при переносе данных на новое устройство.&quot;}]}" />
        <entry key="b3d191b2-1c83-4657-be00-0bdad419b9d0" value="{&quot;id&quot;:&quot;b3d191b2-1c83-4657-be00-0bdad419b9d0&quot;,&quot;name&quot;:&quot;Kotlin Code Error: \&quot;Expecting an expression\&quot;&quot;,&quot;timestamp&quot;:1739876632842,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onRpmChanged,\n            valueRange \u003d 0f..60f,\n            steps \u003d ,\n            labelResId \u003d ,\n            minLabelResId \u003d ,\n            maxLabelResId \u003d ,\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\nExpecting an expression\n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;The error occurs because there are missing values for several parameters in the `MotorControlSlider` call. Here\u0027s the concise fix:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n        MotorControlSlider(\n            value \u003d rpm,\n            isEnabled \u003d isEnabled,\n            onValueChange \u003d onRpmChanged,\n            valueRange \u003d 0f..60f,\n            steps \u003d 15,                               // Add number of steps\n            labelResId \u003d R.string.speed_label,        // Add speed label resource\n            minLabelResId \u003d R.string.min_speed,       // Add min speed label resource\n            maxLabelResId \u003d R.string.max_speed,       // Add max speed label resource\n            unit \u003d \&quot;RPM\&quot;                             // Add unit string\n        )\n```\n\nThe error occurred because the parameters were left empty with just commas. Each parameter needs a concrete value.&quot;}]}" />
        <entry key="b4d7b81b-ecba-484f-8eeb-88db561934b5" value="{&quot;id&quot;:&quot;b4d7b81b-ecba-484f-8eeb-88db561934b5&quot;,&quot;name&quot;:&quot;Justification for Using Indents&quot;,&quot;timestamp&quot;:1739874733883,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nаргументируй использование отсупов\n\u003c/user_query\u003e&quot;}]}" />
        <entry key="b6b1f6cd-b72e-4c3a-93d2-e16075b86a85" value="{&quot;id&quot;:&quot;b6b1f6cd-b72e-4c3a-93d2-e16075b86a85&quot;,&quot;name&quot;:&quot;Resolving Android Permission Error for Bluetooth Device Scanning&quot;,&quot;timestamp&quot;:1739840980353,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\n            Log.d(\&quot;DeviceScanner\&quot;, \&quot;\&quot;\&quot;\n            |Device found:\n            |Address: ${result.device.address}\n            |Name: ${result.device.name}\n            |RSSI: ${result.rssi}\n            |TX Power: ${result.txPower}\n        \&quot;\&quot;\&quot;.trimMargin())\n\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nFor the code present, we get this error:\n```\nCall requires permission which may be rejected by user: code should explicitly check to see if permission is available (with `checkPermission`) or explicitly handle a potential `SecurityException`\n```\nHow can I resolve this? If you propose a fix, please make it concise.\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Here\u0027s a concise way to add an explicit permission check and SecurityException handling in onScanResult:\n\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\n// ... existing code ...\nprivate val leScanCallback \u003d object : ScanCallback() {\n    override fun onScanResult(callbackType: Int, result: ScanResult) {\n        // Check permission at runtime.\n        if (ActivityCompat.checkSelfPermission(\n                context,\n                Manifest.permission.BLUETOOTH_SCAN\n            ) !\u003d PackageManager.PERMISSION_GRANTED\n        ) {\n            // Handle missing permission (e.g., request or return early).\n            return\n        }\n\n        try {\n            Log.d(\&quot;DeviceScanner\&quot;, \&quot;\&quot;\&quot;\n                |Device found:\n                |Address: ${result.device.address}\n                |Name: ${result.device.name}\n                |RSSI: ${result.rssi}\n                |TX Power: ${result.txPower}\n            \&quot;\&quot;\&quot;.trimMargin())\n        } catch (se: SecurityException) {\n            // Handle the potential SecurityException\n            Log.e(\&quot;DeviceScanner\&quot;, \&quot;SecurityException: ${se.message}\&quot;)\n        }\n\n        _deviceList.value \u003d _deviceList.value.toMutableSet().apply { add(result.device) }\n    }\n}\n// ... existing code ...\n```\n\nExplanation:  \n1. We check if the BLUETOOTH_SCAN permission has been granted before accessing scanning data.  \n2. We wrap the sensitive property accesses (like device name, address, etc.) in a try/catch block to handle SecurityException if permission is revoked.&quot;}]}" />
        <entry key="c86f78ca-8a6f-4ee1-9e2b-37e793fb3501" value="{&quot;id&quot;:&quot;c86f78ca-8a6f-4ee1-9e2b-37e793fb3501&quot;,&quot;name&quot;:&quot;Justification for Using Indentations&quot;,&quot;timestamp&quot;:1739874757076,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nаргументируй использование отступов\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;В целом отступы используются, чтобы визуально отделять логические блоки кода друг от друга и облегчать чтение и понимание структуры приложения. Важно, чтобы другие разработчики (да и вы сами, если потом вернетесь к коду) могли без труда понять, какие части кода зависят друг от друга, где начинаются и заканчиваются функции, классы или другие блоки.\n\nНаличие согласованной системы отступов упрощает:\n• Навигацию по файлу и поиск нужных фрагментов кода.  \n• Выявление лишних вложенных блоков или неправильного расположения кода.  \n• Совместную работу над проектом, когда несколько человек работают с одним и тем же файлом.  \n\nВ Android-разработке (и во многих языках программирования, используемых для создании мобильных приложений) обычно принято придерживаться отступа в 4 пробела или одного tab. Главное, чтобы отступы были единообразными во всех файлах проекта.&quot;}]}" />
        <entry key="e64ef63b-bb3e-4843-8c64-752d5c5e2ca1" value="{&quot;id&quot;:&quot;e64ef63b-bb3e-4843-8c64-752d5c5e2ca1&quot;,&quot;name&quot;:&quot;Choosing Fonts for Motus App&quot;,&quot;timestamp&quot;:1739887963283,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/theme/Type.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/theme/Type.kt\npackage com.denior.motus.ui.theme\n\nimport androidx.compose.material3.Typography\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.googlefonts.Font\nimport androidx.compose.ui.text.googlefonts.GoogleFont\nimport com.denior.motus.R\n\nval provider \u003d GoogleFont.Provider(\n    providerAuthority \u003d \&quot;com.google.android.gms.fonts\&quot;,\n    providerPackage \u003d \&quot;com.google.android.gms\&quot;,\n    certificates \u003d R.array.com_google_android_gms_fonts_certs\n)\n\nval bodyFontFamily \u003d FontFamily(\n    Font(\n        googleFont \u003d GoogleFont(\&quot;Tektur\&quot;),\n        fontProvider \u003d provider,\n    )\n)\n\nval displayFontFamily \u003d FontFamily(\n    Font(\n        googleFont \u003d GoogleFont(\&quot;Tektur\&quot;),\n        fontProvider \u003d provider,\n    )\n)\n\nval baseline \u003d Typography()\n\nval AppTypography \u003d Typography(\n    displayLarge \u003d baseline.displayLarge.copy(fontFamily \u003d displayFontFamily),\n    displayMedium \u003d baseline.displayMedium.copy(fontFamily \u003d displayFontFamily),\n    displaySmall \u003d baseline.displaySmall.copy(fontFamily \u003d displayFontFamily),\n    headlineLarge \u003d baseline.headlineLarge.copy(fontFamily \u003d displayFontFamily),\n    headlineMedium \u003d baseline.headlineMedium.copy(fontFamily \u003d displayFontFamily),\n    headlineSmall \u003d baseline.headlineSmall.copy(fontFamily \u003d displayFontFamily),\n    titleLarge \u003d baseline.titleLarge.copy(fontFamily \u003d displayFontFamily),\n    titleMedium \u003d baseline.titleMedium.copy(fontFamily \u003d displayFontFamily),\n    titleSmall \u003d baseline.titleSmall.copy(fontFamily \u003d displayFontFamily),\n    bodyLarge \u003d baseline.bodyLarge.copy(fontFamily \u003d bodyFontFamily),\n    bodyMedium \u003d baseline.bodyMedium.copy(fontFamily \u003d bodyFontFamily),\n    bodySmall \u003d baseline.bodySmall.copy(fontFamily \u003d bodyFontFamily),\n    labelLarge \u003d baseline.labelLarge.copy(fontFamily \u003d bodyFontFamily),\n    labelMedium \u003d baseline.labelMedium.copy(fontFamily \u003d bodyFontFamily),\n    labelSmall \u003d baseline.labelSmall.copy(fontFamily \u003d bodyFontFamily),\n)\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Wallpapers\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            Column(\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n                modifier \u003d Modifier.fillMaxWidth()\n            ) {\n                OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n            }\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onRpmChanged,\n                isEnabled \u003d isEnabled,\n                values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n                isRecommended \u003d 19f,\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set minimum speed\&quot;\n                        60f -\u003e \&quot;Set maximum speed\&quot;\n                        else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n                    }\n                }\n            )\n        }\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled,\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged, isEnabled \u003d isAngleControlEnabled,\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(\n    device \u003d \&quot;spec:width\u003d1440px,height\u003d3360px,dpi\u003d640,orientation\u003dlandscape\&quot;, locale \u003d \&quot;uk\&quot;,\n    showSystemUi \u003d false, showBackground \u003d true, wallpaper \u003d Wallpapers.GREEN_DOMINATED_EXAMPLE\n)\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(0f, 60f)\n            _motorState.update { it.copy(rpm \u003d clampedRpm) }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String \u003d targetDeviceAddress) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\npackage com.denior.motus.ui.component\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.FilledIconButton\nimport androidx.compose.material3.FilledTonalIconButton\nimport androidx.compose.material3.IconButtonDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\n\n@Composable\nfun ValueSelectorButtonRow(\n    isEnabled: Boolean,\n    onValueChanged: (Float) -\u003e Unit,\n    values: List\u003cFloat\u003e,\n    isRecommended: Float? \u003d null,\n    contentDescriptionForParameter: (Float) -\u003e String\n) {\n    Row(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n    ) {\n        values.forEachIndexed { index, value -\u003e\n            val isFirst \u003d index \u003d\u003d 0\n            val isLast \u003d index \u003d\u003d values.size - 1\n\n            val shape \u003d when {\n                isFirst -\u003e RoundedCornerShape(\n                    topStart \u003d 12.dp, topEnd \u003d 8.dp, bottomStart \u003d 12.dp, bottomEnd \u003d 8.dp\n                )\n\n                isLast -\u003e RoundedCornerShape(\n                    topStart \u003d 8.dp, topEnd \u003d 12.dp, bottomStart \u003d 8.dp, bottomEnd \u003d 12.dp\n                )\n\n                else -\u003e RoundedCornerShape(8.dp)\n            }\n\n            val type \u003d when {\n                isRecommended?.let { it \u003d\u003d value } \u003d\u003d true -\u003e TypesOfConviButs.RECOMMENDED\n                isFirst || isLast -\u003e TypesOfConviButs.PRIMARY\n                else -\u003e TypesOfConviButs.STANDARD\n            }\n\n            ConvenientFABLikeSquareButton(\n                onClick \u003d onValueChanged,\n                value \u003d value,\n                shape \u003d shape,\n                type \u003d type,\n                modifier \u003d Modifier.weight(1f),\n                isEnabled \u003d isEnabled,\n                contentDescription \u003d contentDescriptionForParameter(value)\n\n            )\n        }\n    }\n}\n\nenum class TypesOfConviButs {\n    PRIMARY, RECOMMENDED, STANDARD\n}\n\n@Composable\nfun ConvenientFABLikeSquareButton(\n    isEnabled: Boolean,\n    onClick: (Float) -\u003e Unit,\n    value: Float,\n    type: TypesOfConviButs,\n    shape: Shape,\n    modifier: Modifier \u003d Modifier,\n    contentDescription: String\n) {\n    val buttonModifier \u003d\n        Modifier\n            .semantics { this.contentDescription \u003d contentDescription }\n            .then(modifier)\n    when (type) {\n        TypesOfConviButs.PRIMARY -\u003e FilledIconButton(enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            onClick \u003d { onClick(value) }) {\n            Text(\&quot;${value.toInt()}\&quot;)\n        }\n\n        TypesOfConviButs.STANDARD -\u003e FilledTonalIconButton(enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            onClick \u003d { onClick(value) }) {\n            Text(\&quot;${value.toInt()}\&quot;)\n        }\n\n        TypesOfConviButs.RECOMMENDED -\u003e FilledIconButton(enabled \u003d isEnabled,\n            shape \u003d shape,\n            modifier \u003d buttonModifier,\n            colors \u003d IconButtonDefaults.filledIconButtonColors(\n                containerColor \u003d MaterialTheme.colorScheme.tertiaryContainer,\n                contentColor \u003d MaterialTheme.colorScheme.onTertiaryContainer\n            ),\n            onClick \u003d { onClick(value) }) {\n            Text(\&quot;${value.toInt()}\&quot;)\n        }\n    }\n}\n\n@Composable\n@Preview\nfun RowOfConvenientButtonsPrev() {\n    ValueSelectorButtonRow(isEnabled \u003d true,\n        onValueChanged \u003d { },\n        values \u003d listOf(15f, 19f, 30f, 45f, 60f, 90f),\n        isRecommended \u003d 19f,\n        contentDescriptionForParameter \u003d { float -\u003e\n            when (float) {\n                0f -\u003e \&quot;Set minimum speed\&quot;\n                60f -\u003e \&quot;Set maximum speed\&quot;\n                else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n            }\n        })\n}\n\n@Preview\n@Composable\nfun ConvenientFABLikeSquareButtonPreview() {\n    MaterialTheme {\n        ConvenientFABLikeSquareButton(\n            onClick \u003d {},\n            value \u003d 45f,\n            shape \u003d RoundedCornerShape(12.dp),\n            isEnabled \u003d true,\n            type \u003d TypesOfConviButs.RECOMMENDED,\n            modifier \u003d Modifier,\n            contentDescription \u003d 0.0.toString()\n        )\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nКакие шрифты подойдут для моего приложения исходя из его дизайна и функций\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Проанализировав ваш код и дизайн приложения (управление мотором с настройками скорости и угла), я могу предложить следующие рекомендации по шрифтам:\n\n1. Для отображения цифр и технических параметров (скорость, угол):\n- **Roboto Mono** - отличный моноширинный шрифт для цифр и технических данных\n- **JetBrains Mono** - хорошая читаемость цифр\n- **Space Mono** - современный технический вид\n\n2. Для заголовков и основного текста:\n- **Inter** - современный, четкий шрифт с хорошей читаемостью\n- **Work Sans** - отлично подходит для технических интерфейсов\n- **Public Sans** - хорошо сочетается с цифровыми индикаторами\n\nВот пример обновления вашего файла Type.kt:\n\n```kotlin:app/src/main/java/com/denior/motus/ui/theme/Type.kt\n// ... existing imports ...\n\nval provider \u003d GoogleFont.Provider(\n    providerAuthority \u003d \&quot;com.google.android.gms.fonts\&quot;,\n    providerPackage \u003d \&quot;com.google.android.gms\&quot;,\n    certificates \u003d R.array.com_google_android_gms_fonts_certs\n)\n\nval displayFontFamily \u003d FontFamily(\n    Font(\n        googleFont \u003d GoogleFont(\&quot;Inter\&quot;),\n        fontProvider \u003d provider,\n    )\n)\n\nval bodyFontFamily \u003d FontFamily(\n    Font(\n        googleFont \u003d GoogleFont(\&quot;Roboto Mono\&quot;),\n        fontProvider \u003d provider,\n    )\n)\n\n// ... rest of the Typography configuration remains the same ...\n```\n\nПреимущества такого выбора:\n1. **Roboto Mono** для числовых значений обеспечит:\n   - Равную ширину цифр для лучшего выравнивания\n   - Четкое различие между похожими символами (0 и O, 1 и I)\n   - Хорошую читаемость на разных размерах экрана\n\n2. **Inter** для заголовков и основного текста даст:\n   - Современный технический вид\n   - Отличную читаемость\n   - Хорошее сочетание с цифровыми элементами интерфейса\n\nЭто сочетание обеспечит профессиональный вид приложения и хорошую читаемость всех элементов интерфейса.&quot;}]}" />
        <entry key="e7dc453a-3247-4c89-a91f-6bc4ecfe0a0e" value="{&quot;id&quot;:&quot;e7dc453a-3247-4c89-a91f-6bc4ecfe0a0e&quot;,&quot;name&quot;:&quot;Requesting Bluetooth Enablement&quot;,&quot;timestamp&quot;:1739840901471,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(1f, 60f)\n            val newCommand \u003d MotorCommand(\n                targetAngle \u003d _motorState.value.angle.toInt(),\n                rpm \u003d clampedRpm.toInt()\n            )\n            try {\n                sendMotorCommand(newCommand)\n                _motorState.update { it.copy(rpm \u003d clampedRpm) }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor speed: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.ConvenientRowOfFABLikeSquareButtons\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n                      },\n        floatingActionButton \u003d {\n        Column(\n            horizontalAlignment \u003d Alignment.CenterHorizontally,\n            modifier \u003d Modifier.fillMaxWidth()\n        ) {\n            OldDeviceFAB(\n                permission \u003d true,\n                isConnected \u003d isConnected,\n                viewModel \u003d viewModel\n            )\n        }\n    }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean\n) {\n    Column (verticalArrangement \u003d Arrangement.spacedBy(16.dp)){\n        MotorSpeedSlider(\n            value \u003d rpm, isEnabled \u003d isEnabled, onValueChange \u003d onRpmChanged\n        )\n        ConvenientRowOfFABLikeSquareButtons(\n            onValueChanged \u003d onRpmChanged,\n            isEnabled \u003d isEnabled,\n            values \u003d listOf(1f, 15f, 19f, 30f, 45f, 60f),\n            isRecommended \u003d 19f,\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set minimum speed\&quot;\n                    60f -\u003e \&quot;Set maximum speed\&quot;\n                    else -\u003e \&quot;Set speed to ${angle.toInt()} RPM\&quot;\n                }\n            }\n        )\n        MotorAngleSlider(\n            value \u003d angle, isEnabled \u003d isEnabled, onValueChange \u003d onAngleChanged\n        )\n        ConvenientRowOfFABLikeSquareButtons(\n            onValueChanged \u003d onAngleChanged, isEnabled \u003d isEnabled,\n            values \u003d listOf(-360f, -180f, 0f, 180f, 360f),\n            contentDescriptionForParameter \u003d { float -\u003e\n                when (float) {\n                    0f -\u003e \&quot;Set neutral position\&quot;\n                    360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                    else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                }\n            }\n        )\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d 1f..60f,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float, isEnabled: Boolean, onValueChange: (Float) -\u003e Unit\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d -360f..360f,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/bluetooth/manager/BluetoothConnectionManager.kt\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/BluetoothConnectionManager.kt\npackage com.denior.motus.bluetooth.manager\n\nimport android.Manifest\nimport android.bluetooth.BluetoothAdapter\nimport android.bluetooth.BluetoothDevice\nimport android.bluetooth.BluetoothGatt\nimport android.bluetooth.BluetoothGattCallback\nimport android.bluetooth.BluetoothGattCharacteristic\nimport android.bluetooth.BluetoothProfile\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.util.Log\nimport com.denior.motus.bluetooth.interfaces.BluetoothConnectionInterface\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.DeviceCharacteristics\nimport com.denior.motus.data.model.MotorCommand\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport java.util.UUID\nimport javax.inject.Inject\n\nclass BluetoothConnectionManager @Inject constructor(\n    private val context: Context,\n    private val bluetoothAdapter: BluetoothAdapter,\n) : BluetoothConnectionInterface {\n    companion object {\n        private const val TAG \u003d \&quot;BluetoothConnectionManager\&quot;\n        private const val CONNECTION_TIMEOUT \u003d 10_000L\n\n        private object Services {\n            val MOTOR_SERVICE: UUID \u003d UUID.fromString(\&quot;00001815-0000-1000-8000-00805f9b34fb\&quot;)\n        }\n\n        private object Characteristics {\n            val MOTOR: UUID \u003d UUID.fromString(\&quot;02001525-1212-efde-1523-785feabcd123\&quot;)\n        }\n    }\n\n    private val _connectionState \u003d MutableStateFlow\u003cConnectionState\u003e(ConnectionState.Disconnected)\n    override val connectionState: StateFlow\u003cConnectionState\u003e get() \u003d _connectionState\n\n    private val _characteristicsFlow \u003d MutableStateFlow\u003cList\u003cDeviceCharacteristics\u003e\u003e(emptyList())\n    override val characteristicsFlow:\n            StateFlow\u003cList\u003cDeviceCharacteristics\u003e\u003e \u003d _characteristicsFlow\n\n    private var _connectedDeviceAddress: String? \u003d null\n    val connectedDeviceAddress: String? get() \u003d _connectedDeviceAddress\n    private var bluetoothGatt: BluetoothGatt? \u003d null\n    private var connectionJob: Job? \u003d null\n\n    private fun BluetoothGattCharacteristic.hasNotifyProperty(): Boolean {\n        return properties and BluetoothGattCharacteristic.PROPERTY_NOTIFY !\u003d 0\n    }\n\n    private val gattCallback \u003d object : BluetoothGattCallback() {\n        override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {\n            handleConnectionStateChange(gatt, status, newState)\n        }\n\n        override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {\n            handleServicesDiscovered(\n                gatt, status, ByteArray(0)\n            )\n        }\n\n        override fun onCharacteristicChanged(\n            gatt: BluetoothGatt,\n            characteristic: BluetoothGattCharacteristic,\n            value: ByteArray\n        ) {\n            if (characteristic.uuid \u003d\u003d Characteristics.MOTOR) {\n                Log.d(TAG, \&quot;Received feedback from device: ${value.contentToString()}\&quot;)\n            }\n            handleCharacteristicChanged(characteristic, value)\n        }\n\n        override fun onCharacteristicWrite(\n            gatt: BluetoothGatt,\n            characteristic: BluetoothGattCharacteristic,\n            status: Int\n        ) {\n            handleCharacteristicWrite(characteristic, status)\n        }\n    }\n\n    private fun hasBluetoothPermissions(): Boolean {\n        return context.checkSelfPermission(\n            Manifest.permission\n                .BLUETOOTH_CONNECT\n        ) \u003d\u003d PackageManager\n            .PERMISSION_GRANTED \u0026\u0026 context.checkSelfPermission(\n            Manifest\n                .permission.BLUETOOTH_SCAN\n        ) \u003d\u003d PackageManager.PERMISSION_GRANTED\n    }\n\n    private fun handleMissingPermissions(operation: String) {\n        Log.e(TAG, \&quot;Missing Bluetooth permissions for operation: $operation\&quot;)\n        _connectionState.value \u003d ConnectionState.Failed(\&quot;Missing Bluetooth permissions\&quot;)\n    }\n\n    override fun connect(deviceAddress: String) {\n        if (!validateBluetoothState(deviceAddress)) return\n        if (!hasBluetoothPermissions()) {\n            handleMissingPermissions(\&quot;connect\&quot;)\n            return\n        }\n\n        try {\n            val device \u003d bluetoothAdapter.getRemoteDevice(deviceAddress)\n            if (device.bondState !\u003d BluetoothDevice.BOND_BONDED) {\n                Log.d(TAG, \&quot;Device not bonded, attempting to create bond\&quot;)\n                device.createBond()\n            }\n\n            _connectedDeviceAddress \u003d deviceAddress\n            _connectionState.value \u003d ConnectionState.Connecting\n\n            connectionJob \u003d CoroutineScope(Dispatchers.IO).launch {\n                try {\n                    withTimeout(CONNECTION_TIMEOUT) {\n                        bluetoothGatt \u003d device.connectGatt(\n                            context,\n                            false,\n                            gattCallback,\n                            BluetoothDevice.TRANSPORT_LE\n                        )\n                    }\n                } catch (e: Exception) {\n                    _connectionState.value \u003d\n                        ConnectionState.Failed(e.message ?: \&quot;Connection timeout\&quot;)\n                    disconnect()\n                }\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;connect\&quot;)\n        }\n    }\n\n    private fun validateBluetoothState(deviceAddress: String): Boolean {\n        Log.d(TAG, \&quot;Attempting to connect to device: $deviceAddress\&quot;)\n        try {\n            if (!bluetoothAdapter.isEnabled) {\n                Log.e(TAG, \&quot;Connection failed: Bluetooth is disabled\&quot;)\n                _connectionState.value \u003d ConnectionState.Failed(\&quot;Bluetooth is disabled\&quot;)\n                return false\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;validateBluetoothState\&quot;)\n            return false\n        }\n        return true\n    }\n\n    override fun disconnect() {\n        try {\n            bluetoothGatt?.disconnect()\n            bluetoothGatt?.close()\n            bluetoothGatt \u003d null\n            _connectedDeviceAddress \u003d null\n            _connectionState.value \u003d ConnectionState.Disconnected\n            _characteristicsFlow.value \u003d emptyList()\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;disconnect\&quot;)\n        }\n    }\n\n    private fun getCharacteristic(\n        serviceUUID: UUID,\n        characteristicUUID: UUID\n    ): BluetoothGattCharacteristic? {\n        if (!hasBluetoothPermissions()) {\n            handleMissingPermissions(\&quot;getCharacteristic\&quot;)\n            return null\n        }\n\n        try {\n            return bluetoothGatt?.getService(serviceUUID)?.getCharacteristic(characteristicUUID)\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;getCharacteristic\&quot;)\n            return null\n        }\n    }\n\n    private fun handleConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {\n        try {\n            if (status !\u003d BluetoothGatt.GATT_SUCCESS) {\n                Log.e(TAG, \&quot;Connection failed with status: $status\&quot;)\n                _connectionState.value \u003d\n                    ConnectionState.Failed(\&quot;Connection failed with status: $status\&quot;)\n                return\n            }\n            when (newState) {\n                BluetoothProfile.STATE_CONNECTED -\u003e {\n                    Log.d(TAG, \&quot;Connected to GATT server, discovering services...\&quot;)\n                    gatt.discoverServices()\n                }\n\n                BluetoothProfile.STATE_DISCONNECTED -\u003e {\n                    Log.d(TAG, \&quot;Disconnected from GATT server\&quot;)\n                    _connectionState.value \u003d ConnectionState.Disconnected\n                    _characteristicsFlow.value \u003d emptyList()\n                    bluetoothGatt?.close()\n                }\n\n                else -\u003e {\n                    Log.w(TAG, \&quot;Unknown connection state: $newState\&quot;)\n                    _connectionState.value \u003d ConnectionState\n                        .Failed(\&quot;Unknown state: $newState\&quot;)\n                }\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;handleConnectionStateChange\&quot;)\n            disconnect()\n        }\n    }\n\n    private fun handleServicesDiscovered(gatt: BluetoothGatt, status: Int, value: ByteArray) {\n        try {\n            if (status \u003d\u003d BluetoothGatt.GATT_SUCCESS) {\n                _connectionState.value \u003d ConnectionState.Connected(gatt.device.name)\n                val characteristics \u003d gatt.services?.flatMap { service -\u003e\n                    service.characteristics?.map { characteristic -\u003e\n                        if (characteristic.hasNotifyProperty()) {\n                            gatt.setCharacteristicNotification(characteristic, true)\n                        }\n                        DeviceCharacteristics(\n                            uuid \u003d characteristic.uuid.toString(),\n                            value \u003d value\n                        )\n                    } ?: emptyList()\n                } ?: emptyList()\n\n                _characteristicsFlow.value \u003d characteristics\n            } else {\n                Log.e(TAG, \&quot;Service discovery failed with status: $status\&quot;)\n                disconnect()\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;handleServicesDiscovered\&quot;)\n            disconnect()\n        }\n    }\n\n    private fun handleCharacteristicChanged(\n        characteristic: BluetoothGattCharacteristic,\n        value: ByteArray\n    ) {\n        try {\n            Log.d(\n                TAG, \&quot;\&quot;\&quot;\n            |Characteristic changed:\n            |UUID: ${characteristic.uuid}\n            |New value: ${value.contentToString()}\n        \&quot;\&quot;\&quot;.trimMargin()\n            )\n\n            val deviceCharacteristic \u003d DeviceCharacteristics(\n                uuid \u003d characteristic.uuid.toString(),\n                value \u003d value\n            )\n\n            _characteristicsFlow.value \u003d _characteristicsFlow.value.map {\n                if (it.uuid \u003d\u003d deviceCharacteristic.uuid) deviceCharacteristic else it\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;handleCharacteristicChanged\&quot;)\n        }\n    }\n\n    private fun handleCharacteristicWrite(\n        characteristic: BluetoothGattCharacteristic,\n        status: Int\n    ) {\n        when (status) {\n            BluetoothGatt.GATT_SUCCESS -\u003e {\n                Log.d(TAG, \&quot;Write successful for ${characteristic.uuid}\&quot;)\n            }\n\n            BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION -\u003e {\n                Log.e(TAG, \&quot;Authentication required, attempting to bond\&quot;)\n                _connectedDeviceAddress?.let { address -\u003e\n                    bluetoothAdapter.getRemoteDevice(address).createBond()\n                }\n            }\n\n            else -\u003e {\n                Log.e(TAG, \&quot;Characteristic write failed with status: $status\&quot;)\n            }\n        }\n    }\n\n    fun sendMotorCommand(command: MotorCommand) {\n        if (!hasBluetoothPermissions()) {\n            handleMissingPermissions(\&quot;sendMotorCommand\&quot;)\n            return\n        }\n\n        if (connectionState.value !is ConnectionState.Connected) {\n            Log.e(TAG, \&quot;Cannot send motor command: device not connected\&quot;)\n            return\n        }\n\n        try {\n            val characteristic \u003d getCharacteristic(Services.MOTOR_SERVICE, Characteristics.MOTOR)\n            characteristic?.let { it -\u003e\n                val safeRpm \u003d command.rpm.coerceIn(1, 60)\n                val safeAngle \u003d command.targetAngle.coerceIn(-360, 360)\n                val data \u003d MotorCommand(safeAngle, safeRpm).toByteArray()\n\n                Log.d(TAG, \&quot;Sending command: ${data.joinToString { \&quot;%02X\&quot;.format(it) }}\&quot;)\n\n                try {\n                    bluetoothGatt?.writeCharacteristic(\n                        it,\n                        data,\n                        BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT\n                    )\n                } catch (e: SecurityException) {\n                    handleMissingPermissions(\&quot;writeCharacteristic\&quot;)\n                    Log.e(TAG, \&quot;SecurityException while writing characteristic\&quot;, e)\n                }\n            }\n        } catch (e: SecurityException) {\n            handleMissingPermissions(\&quot;getCharacteristic\&quot;)\n        } catch (e: Exception) {\n            Log.e(TAG, \&quot;Error sending command: ${e.message}\&quot;)\n        }\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/OldFAB.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/OldFAB.kt\npackage com.denior.motus.ui.component\n\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExtendedFloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.state.SearchState\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun OldDeviceFAB(viewModel: MotusViewModel, permission: Boolean, isConnected: Boolean) {\n    val deviceList by viewModel.deviceList.collectAsState()\n    val searchState by viewModel.searchState.collectAsState()\n    var showDeviceList by remember { mutableStateOf(false) }\n    val connectionState by viewModel.connectionState.collectAsState()\n\n    val containerColor \u003d when {\n        !permission -\u003e MaterialTheme.colorScheme.tertiary\n        connectionState is ConnectionState.Failed -\u003e MaterialTheme.colorScheme.error\n        isConnected -\u003e MaterialTheme.colorScheme.primary\n        else -\u003e MaterialTheme.colorScheme.primary\n    }\n\n    val fabIcon \u003d when {\n        !permission -\u003e Icons.Default.Warning\n        connectionState is ConnectionState.Failed -\u003e Icons.Default.Warning\n        isConnected -\u003e Icons.Default.Search\n        searchState \u003d\u003d SearchState.Scanning -\u003e null\n        else -\u003e Icons.Default.Search\n    }\n\n    val fabText: String \u003d when {\n        !permission -\u003e stringResource(R.string.needs_permissions)\n        connectionState is ConnectionState.Failed -\u003e stringResource(R.string.connection_failed)\n        isConnected -\u003e stringResource(R.string.change_device)\n        searchState \u003d\u003d SearchState.Scanning -\u003e stringResource(R.string.scanning)\n        else -\u003e stringResource(R.string.select_device)\n    }\n\n    val requiredPermissions \u003d listOf(\n        Manifest.permission.BLUETOOTH_SCAN,\n        Manifest.permission.BLUETOOTH_CONNECT,\n        Manifest.permission.ACCESS_FINE_LOCATION,\n    )\n    val context \u003d androidx.compose.ui.platform.LocalContext.current\n    val hasAllPermissions \u003d requiredPermissions.all { perm -\u003e\n        androidx.core.content.ContextCompat.checkSelfPermission(context,\n            perm) \u003d\u003d PackageManager.PERMISSION_GRANTED\n    }\n\n\n    val permissionLauncher \u003d rememberLauncherForActivityResult(\n\n        ActivityResultContracts.RequestMultiplePermissions()\n\n    ) { perms -\u003e\n        if (perms.all { it.value }) {\n            viewModel.startScanning()\n            showDeviceList \u003d true\n        }\n    }\n\n    ExtendedFloatingActionButton(\n        onClick \u003d {\n            when {\n                !hasAllPermissions -\u003e {\n                    permissionLauncher.launch(requiredPermissions.toTypedArray())\n                }\n                connectionState is ConnectionState.Failed -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n                isConnected -\u003e {\n                    viewModel.disconnect()\n                    viewModel.clearDevices()\n                    viewModel.stopScanning()\n                    showDeviceList \u003d true\n                }\n                searchState !\u003d SearchState.Scanning -\u003e {\n                    viewModel.startScanning()\n                    showDeviceList \u003d true\n                }\n            }\n        },\n        icon \u003d {\n            if (searchState \u003d\u003d SearchState.Scanning) {\n                CircularProgressIndicator(modifier \u003d Modifier.size(24.dp))\n            } else {\n                fabIcon?.let { Icon(it, \&quot;Device Control\&quot;) }\n            }\n        },\n        text \u003d { Text(fabText) },\n        expanded \u003d !isConnected,\n        containerColor \u003d containerColor,\n        contentColor \u003d MaterialTheme.colorScheme.onPrimary\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nпомоги реализовать запрос пользователя на включение блютуза, если он выключен\nval enableBtIntent \u003d Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\nstartActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Вот один из вариантов, как можно запросить у пользователя включение Bluetooth перед началом сканирования. Ниже добавлен лишь небольшой участок кода в метод startScanning():\n\n```kotlin:app/src/main/java/com/denior/motus/bluetooth/manager/DeviceScanner.kt\n// ... существующий код ...\noverride fun startScanning() {\n    // ... существующий код ...\n\n    if (bluetoothAdapter?.isEnabled \u003d\u003d false) {\n        val enableBtIntent \u003d Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\n        context.startActivity(enableBtIntent)\n        return\n    }\n\n    // ... оставшийся код метода ...\n}\n// ... существующий код ...\n```\n\nСмысл изменений:  \n• Сначала проверяем, включён ли Bluetooth (bluetoothAdapter?.isEnabled \u003d\u003d false).  \n• Если Bluetooth отключён, создаём Intent для включения (BluetoothAdapter.ACTION_REQUEST_ENABLE) и запускаем Activity.  \n• Возвращаем управление (return), чтобы не продолжать сканирование до тех пор, пока пользователь не вернётся обратно с включённым Bluetooth.&quot;}]}" />
        <entry key="f527100c-7460-4843-9b23-274f08132016" value="{&quot;id&quot;:&quot;f527100c-7460-4843-9b23-274f08132016&quot;,&quot;name&quot;:&quot;Rounded Corner Shape Justification in Kotlin Code&quot;,&quot;timestamp&quot;:1739879917348,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/component/TypesOfConviButs.kt\nval shape \u003d when {\n                isFirst -\u003e RoundedCornerShape(\n                    topStart \u003d 12.dp, topEnd \u003d 8.dp, bottomStart \u003d 12.dp, bottomEnd \u003d 8.dp\n                )\n\n                isLast -\u003e RoundedCornerShape(\n                    topStart \u003d 8.dp, topEnd \u003d 12.dp, bottomStart \u003d 8.dp, bottomEnd \u003d 12.dp\n                )\n\n                else -\u003e RoundedCornerShape(8.dp)\n            }\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nаргументируй такие скругления\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Я отвечу на русском, так как вопрос задан на русском языке.\n\nТакая схема скруглений углов создает визуальную группировку кнопок и следует принципам Material Design 3. Давайте разберем почему:\n\n1. **Внешние углы (12.dp)**\n   - Первая кнопка: скругление слева (topStart, bottomStart)\n   - Последняя кнопка: скругление справа (topEnd, bottomEnd)\n   - Более сильное скругление (12.dp) на внешних краях группы создает мягкий визуальный переход и отделяет группу кнопок от окружающих элементов\n\n2. **Внутренние углы (8.dp)**\n   - Все внутренние углы между кнопками имеют меньший радиус (8.dp)\n   - Это создает эффект связанности элементов и показывает, что кнопки принадлежат к одной группе\n   - Меньший радиус помогает визуально соединить кнопки друг с другом\n\nТакой подход соответствует рекомендациям Material Design 3 по созданию сегментированных кнопок (segmented buttons) и других сгруппированных элементов управления. Это помогает:\n- Создать четкую визуальную иерархию\n- Улучшить восприятие группы как единого целого\n- Сохранить баланс между разделением и объединением элементов\n\nВы можете увидеть похожие паттерны в официальной документации Material Design 3 для компонентов вроде Segmented Buttons или Button Groups.&quot;}]}" />
        <entry key="ff0f4645-cb5f-4611-8913-057efa268196" value="{&quot;id&quot;:&quot;ff0f4645-cb5f-4611-8913-057efa268196&quot;,&quot;name&quot;:&quot;Что делать с файлом?&quot;,&quot;timestamp&quot;:1739841438129,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nЧто мне елать с этим файлом?\n\u003c/user_query\u003e&quot;}]}" />
        <entry key="ff6fbaa9-f8d9-4048-b48e-89de73d4dccc" value="{&quot;id&quot;:&quot;ff6fbaa9-f8d9-4048-b48e-89de73d4dccc&quot;,&quot;name&quot;:&quot;Recommendations Discussion&quot;,&quot;timestamp&quot;:1739876979741,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cuser_query\u003e\nrecomendations\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;I notice your query is quite broad. Are you looking for recommendations about:\n\n1. **Android Development Best Practices**?\n   - Architecture patterns (MVVM, Clean Architecture)\n   - Code organization\n   - Performance optimization\n\n2. **Android Libraries**?\n   - Popular and reliable libraries for common tasks\n   - Modern Android development tools\n\n3. **Learning Resources**?\n   - Courses\n   - Documentation\n   - Tutorials\n   - Books\n\n4. **Development Tools**?\n   - IDEs\n   - Debugging tools\n   - Testing frameworks\n\nPlease let me know which area you\u0027re interested in, and I\u0027ll be happy to provide specific recommendations!&quot;}]}" />
        <entry key="ff86f28d-8c97-4359-8549-8251ceb306bb" value="{&quot;id&quot;:&quot;ff86f28d-8c97-4359-8549-8251ceb306bb&quot;,&quot;name&quot;:&quot;Requesting Bluetooth Permissions for Android App&quot;,&quot;timestamp&quot;:1739894400905,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\n\u003cadditional_data\u003e\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/screen/ControlScreen.kt\npackage com.denior.motus.ui.screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.stateDescription\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Wallpapers\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.denior.motus.R\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.ui.component.ConnectionStatusCard\nimport com.denior.motus.ui.component.MotusTopBar\nimport com.denior.motus.ui.component.OldDeviceFAB\nimport com.denior.motus.ui.component.ValueSelectorButtonRow\nimport com.denior.motus.ui.viewmodel.MotusViewModel\n\n@Composable\nfun MotusApp(\n    viewModel: MotusViewModel \u003d hiltViewModel()\n) {\n    val motorState by viewModel.motorState.collectAsState()\n    val connectionState by viewModel.connectionState.collectAsState()\n    val isConnected \u003d connectionState is ConnectionState.Connected\n\n    Scaffold(topBar \u003d {\n        MotusTopBar()\n    },\n        floatingActionButton \u003d {\n            OldDeviceFAB(\n                    permission \u003d true,\n                    isConnected \u003d isConnected,\n                    viewModel \u003d viewModel\n                )\n        }\n    ) { innerPadding -\u003e\n        ControlScreen(\n            modifier \u003d Modifier.padding(innerPadding),\n            isConnected \u003d isConnected,\n            motorState \u003d motorState,\n            connectionState \u003d connectionState,\n            onSpeedChange \u003d { newSpeed -\u003e\n                if (isConnected) viewModel.setMotorSpeed(newSpeed)\n            },\n            onAngleChange \u003d { newAngle -\u003e\n                if (isConnected) viewModel.setMotorAngle(newAngle)\n            }\n        )\n    }\n}\n\n@Composable\nfun ControlScreen(\n    modifier: Modifier,\n    connectionState: ConnectionState,\n    onSpeedChange: (Float) -\u003e Unit,\n    onAngleChange: (Float) -\u003e Unit,\n    isConnected: Boolean,\n    motorState: MotusViewModel.MotorState\n) {\n    Column(\n        modifier \u003d modifier.padding(16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n    ) {\n        ConnectionStatusCard(connectionState \u003d connectionState)\n        MotorControl(\n            rpm \u003d motorState.rpm,\n            angle \u003d motorState.angle,\n            onRpmChanged \u003d onSpeedChange,\n            onAngleChanged \u003d onAngleChange,\n            isEnabled \u003d isConnected\n        )\n    }\n}\n\n@Composable\nfun MotorControl(\n    rpm: Float,\n    angle: Float,\n    onRpmChanged: (Float) -\u003e Unit,\n    onAngleChanged: (Float) -\u003e Unit,\n    isEnabled: Boolean,\n\n    ) {\n    val isAngleControlEnabled \u003d isEnabled \u0026\u0026 rpm \u003e 0\n\n\n    LazyColumn(verticalArrangement \u003d Arrangement.spacedBy(16.dp)) {\n        item {\n            MotorControlSlider(\n                value \u003d rpm,\n                isEnabled \u003d isEnabled,\n                onValueChange \u003d onRpmChanged,\n                valueRange \u003d 0f..60f,\n                steps \u003d 15,\n                labelResId \u003d R.string.speed_label,\n                minLabelResId \u003d R.string.min_speed,\n                maxLabelResId \u003d R.string.max_speed,\n                unit \u003d \&quot;RPM\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onRpmChanged,\n                isEnabled \u003d isEnabled,\n                values \u003d listOf(15f, 19f, 30f, 45f, 60f),\n                isRecommended \u003d 19f,\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set minimum speed\&quot;\n                        60f -\u003e \&quot;Set maximum speed\&quot;\n                        else -\u003e \&quot;Set speed to ${float.toInt()} RPM\&quot;\n                    }\n                }\n            )\n        }\n        item {\n            MotorControlSlider(\n                value \u003d angle,\n                isEnabled \u003d isAngleControlEnabled,\n                onValueChange \u003d onAngleChanged,\n                valueRange \u003d -180f..180f,\n                steps \u003d 15,\n                labelResId \u003d R.string.angle_label,\n                minLabelResId \u003d R.string.min_angle,\n                maxLabelResId \u003d R.string.max_angle,\n                unit \u003d \&quot;Degrees\&quot;\n            )\n        }\n        item {\n            ValueSelectorButtonRow(\n                onValueChanged \u003d onAngleChanged, isEnabled \u003d isAngleControlEnabled,\n                values \u003d listOf(-360f, -180f, 180f, 360f),\n                contentDescriptionForParameter \u003d { float -\u003e\n                    when (float) {\n                        0f -\u003e \&quot;Set neutral position\&quot;\n                        360f, -360f -\u003e \&quot;Set full rotation\&quot;\n                        else -\u003e \&quot;Set angle to ${angle.toInt()} degrees\&quot;\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorControlSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    valueRange: ClosedFloatingPointRange\u003cFloat\u003e,\n    steps: Int,\n    labelResId: Int,\n    minLabelResId: Int,\n    maxLabelResId: Int,\n    unit: String\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d stringResource(labelResId, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d valueRange,\n            steps \u003d steps,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current value: ${value.toInt()} $unit\&quot;\n                },\n        )\n\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(minLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f),\n                text \u003d stringResource(maxLabelResId),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Composable\nfun MotorSpeedSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    rpmValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d 1f..60f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.speed_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Speed control slider\&quot;\n            }\n        )\n\n        Slider(\n            value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d rpmValueRange,\n            steps \u003d 15,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .semantics {\n                    stateDescription \u003d \&quot;Current speed: ${value.toInt()} RPM\&quot;\n                    contentDescription \u003d \&quot;Motor speed control slider\&quot;\n                },\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.max_speed),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n\n@Composable\nfun MotorAngleSlider(\n    value: Float,\n    isEnabled: Boolean,\n    onValueChange: (Float) -\u003e Unit,\n    angleValueRange: ClosedFloatingPointRange\u003cFloat\u003e \u003d -360f..360f\n) {\n    Column(\n        modifier \u003d Modifier.fillMaxWidth(), horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(text \u003d stringResource(R.string.angle_label, value.toInt()),\n            style \u003d MaterialTheme.typography.titleMedium,\n            modifier \u003d Modifier.semantics {\n                contentDescription \u003d \&quot;Angle control slider\&quot;\n            }\n        )\n\n\n        Slider(value \u003d value,\n            onValueChange \u003d { onValueChange(it) },\n            valueRange \u003d angleValueRange,\n            steps \u003d 72,\n            enabled \u003d isEnabled,\n            modifier \u003d Modifier.semantics {\n                stateDescription \u003d \&quot;Current angle: ${value.toInt()} degrees\&quot;\n                contentDescription \u003d \&quot;Motor angle control slider\&quot;\n            }\n        )\n        Row(\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.SpaceBetween\n        ) {\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                stringResource(R.string.min_angle),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n\n            Text(\n                modifier \u003d Modifier.weight(1f), text \u003d\n                (stringResource(R.string.max_angle)),\n                style \u003d MaterialTheme.typography.labelMedium,\n                color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ControlScreenPreview() {\n    val mockMotorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d mockMotorState\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorControlPreview() {\n    MotorControl(\n        rpm \u003d 30f,\n        angle \u003d 0f,\n        onRpmChanged \u003d {},\n        onAngleChanged \u003d {},\n        isEnabled \u003d true\n    )\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun ConnectionStatusCardPreview() {\n    ConnectionStatusCard(connectionState \u003d ConnectionState.Connected())\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorSpeedSliderPreview() {\n    MotorSpeedSlider(value \u003d 30f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(showBackground \u003d true)\n@Composable\nfun MotorAngleSliderPreview() {\n    MotorAngleSlider(value \u003d 0f, isEnabled \u003d true, onValueChange \u003d {})\n}\n\n@Preview(\n    device \u003d \&quot;spec:width\u003d1440px,height\u003d3360px,dpi\u003d640,orientation\u003dlandscape\&quot;, locale \u003d \&quot;uk\&quot;,\n    showSystemUi \u003d false, showBackground \u003d true, wallpaper \u003d Wallpapers.GREEN_DOMINATED_EXAMPLE\n)\n@Composable\nfun ControlScreenVariant(){\n    ControlScreen(\n        modifier \u003d Modifier,\n        connectionState \u003d ConnectionState.Connected(),\n        onSpeedChange \u003d {},\n        onAngleChange \u003d {},\n        isConnected \u003d true,\n        motorState \u003d MotusViewModel.MotorState(rpm \u003d 30f, angle \u003d 0f)\n    )\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\n```kotlin:app/src/main/java/com/denior/motus/ui/viewmodel/MotusViewModel.kt\npackage com.denior.motus.ui.viewmodel\n\nimport android.bluetooth.BluetoothDevice\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.denior.motus.bluetooth.manager.BluetoothConnectionManager\nimport com.denior.motus.bluetooth.manager.DeviceScanner\nimport com.denior.motus.bluetooth.state.ConnectionState\nimport com.denior.motus.data.model.MotorCommand\nimport com.denior.motus.ui.state.SearchState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withTimeout\nimport javax.inject.Inject\n\n@HiltViewModel\nclass MotusViewModel @Inject constructor(\n    private val deviceScanner: DeviceScanner,\n    private val bluetoothConnectionManager: BluetoothConnectionManager\n) : ViewModel() {\n\n    private val targetDeviceAddress \u003d \&quot;F0:F5:BD:C9:66:1E\&quot;\n\n\n    val deviceList: StateFlow\u003cList\u003cBluetoothDevice\u003e\u003e \u003d deviceScanner.deviceList\n        .map { it.toList() }\n        .stateIn(viewModelScope, SharingStarted.Lazily, emptyList())\n\n    val connectionState: StateFlow\u003cConnectionState\u003e \u003d bluetoothConnectionManager.connectionState\n\n    private val _searchState \u003d MutableStateFlow\u003cSearchState\u003e(SearchState.Idle)\n    val searchState: StateFlow\u003cSearchState\u003e get() \u003d _searchState\n\n    private var lastConnectAttempt: Long \u003d 0\n    private val debounceInterval \u003d 2000\n\n    private val _motorState \u003d MutableStateFlow(MotorState())\n    val motorState: StateFlow\u003cMotorState\u003e \u003d _motorState\n\n    fun setMotorSpeed(rpm: Float) {\n        viewModelScope.launch {\n            val clampedRpm \u003d rpm.coerceIn(0f, 60f)\n            _motorState.update { it.copy(rpm \u003d clampedRpm) }\n        }\n    }\n\n    fun setMotorAngle(degrees: Float) {\n        viewModelScope.launch {\n            _motorState.update { currentState -\u003e\n                val clampedAngle \u003d degrees.coerceIn(-360f, 360f)\n                val newCommand \u003d MotorCommand(\n                    targetAngle \u003d clampedAngle.toInt(),\n                    rpm \u003d currentState.rpm.toInt()\n                )\n                try {\n                    sendMotorCommand(newCommand)\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Failed to set motor angle: ${e.message}\&quot;)\n                }\n                currentState.copy(angle \u003d clampedAngle)\n            }\n        }\n    }\n\n    data class MotorState(\n        val rpm: Float \u003d 0f,\n        val angle: Float \u003d 0f\n    )\n\n    private fun sendMotorCommand(command: MotorCommand) {\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value !is ConnectionState.Connected) {\n                Log.w(\&quot;MotusViewModel\&quot;, \&quot;Cannot send command: device not connected\&quot;)\n                return@launch\n            }\n\n            try {\n                bluetoothConnectionManager.sendMotorCommand(command)\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Error sending motor command: ${e.message}\&quot;)\n            }\n        }\n    }\n\n    fun startScanning() {\n        viewModelScope.launch {\n            try {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Starting scan, looking for device: $targetDeviceAddress\&quot;)\n                _searchState.value \u003d SearchState.Scanning\n                deviceScanner.startScanning()\n\n                try {\n                    withTimeout(10000) {\n                        while (!deviceList.value.any { it.address \u003d\u003d targetDeviceAddress }) {\n                            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Current device list: ${\n                                deviceList.value.joinToString {\n                                    it.address\n                                }\n                            }\&quot;)\n                            delay(100)\n                        }\n                        Log.d(\&quot;MotusViewModel\&quot;, \&quot;Target device found!\&quot;)\n                        deviceList.value.find { it.address \u003d\u003d targetDeviceAddress }?.let {\n                            connectToDevice(targetDeviceAddress)\n                        }\n                    }\n                    _searchState.value \u003d SearchState.Success\n                } catch (e: Exception) {\n                    Log.e(\&quot;MotusViewModel\&quot;, \&quot;Scanning failed: ${e.message}, devices found: ${\n                        deviceList.value.size\n                    }\&quot;)\n                    _searchState.value \u003d SearchState.Error\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;MotusViewModel\&quot;, \&quot;Unexpected error during scanning: ${e.message}\&quot;, e)\n                _searchState.value \u003d SearchState.Error\n            } finally {\n                Log.d(\&quot;MotusViewModel\&quot;, \&quot;Stopping scan...\&quot;)\n                deviceScanner.stopScanning()\n                _searchState.value \u003d SearchState.Idle\n            }\n        }\n    }\n\n    fun stopScanning() {\n        deviceScanner.stopScanning()\n        _searchState.value \u003d SearchState.Idle\n    }\n\n    fun connectToDevice(deviceAddress: String \u003d targetDeviceAddress) {\n\n        val currentTime \u003d System.currentTimeMillis()\n        if (currentTime - lastConnectAttempt \u003c debounceInterval) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connect attempt ignored due to debounce.\&quot;)\n            return\n        }\n        lastConnectAttempt \u003d currentTime\n\n        if (bluetoothConnectionManager.connectedDeviceAddress \u003d\u003d deviceAddress \u0026\u0026\n            connectionState.value \u003d\u003d ConnectionState.Connected()\n        ) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Already connected to this device: $deviceAddress\&quot;)\n            return\n        }\n\n        viewModelScope.launch(Dispatchers.IO) {\n            if (connectionState.value \u003d\u003d ConnectionState.Connected()) {\n                bluetoothConnectionManager.disconnect()\n                delay(500)\n            }\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Connecting to device: $deviceAddress\&quot;)\n            bluetoothConnectionManager.connect(deviceAddress)\n        }\n    }\n\n    fun disconnect() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\&quot;MotusViewModel\&quot;, \&quot;Disconnecting from device\&quot;)\n            bluetoothConnectionManager.disconnect()\n        }\n    }\n\n    fun clearDevices() {\n        _searchState.value \u003d SearchState.Idle\n    }\n}\n```\n\u003c/especially_relevant_code_snippet\u003e\n\n\u003cespecially_relevant_code_snippet\u003e\napp/src/main/AndroidManifest.xml\n```xml:app/src/main/AndroidManifest.xml\n\u003c?xml version\u003d\&quot;1.0\&quot; encoding\u003d\&quot;utf-8\&quot;?\u003e\n\u003cmanifest xmlns:android\u003d\&quot;http://schemas.android.com/apk/res/android\&quot;\u003e\n\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_SCAN\&quot; /\u003e\n    \u003cuses-permission\n        android:name\u003d\&quot;android.permission.BLUETOOTH_CONNECT\&quot;\n        android:usesPermissionFlags\u003d\&quot;neverForLocation\&quot; /\u003e\n\n    \u003capplication\n        android:name\u003d\&quot;.MotusApplication\&quot;\n        android:allowBackup\u003d\&quot;true\&quot;\n        android:dataExtractionRules\u003d\&quot;@xml/data_extraction_rules\&quot;\n        android:enableOnBackInvokedCallback\u003d\&quot;true\&quot;\n        android:fullBackupContent\u003d\&quot;@xml/backup_rules\&quot;\n        android:icon\u003d\&quot;@mipmap/ic_launcher\&quot;\n        android:label\u003d\&quot;@string/app_name\&quot;\n        android:roundIcon\u003d\&quot;@mipmap/ic_launcher_round\&quot;\n        android:supportsRtl\u003d\&quot;true\&quot;\n        android:theme\u003d\&quot;@style/Theme.Motus\&quot;\u003e\n        \u003cactivity\n            android:name\u003d\&quot;.MainActivity\&quot;\n            android:exported\u003d\&quot;true\&quot;\n            android:theme\u003d\&quot;@style/Theme.Motus\&quot;\u003e\n\n            \u003cintent-filter\u003e\n                \u003caction android:name\u003d\&quot;android.intent.action.MAIN\&quot; /\u003e\n\n                \u003ccategory android:name\u003d\&quot;android.intent.category.LAUNCHER\&quot; /\u003e\n            \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\u003c/especially_relevant_code_snippet\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\n\u003cmanifest\u003e\n    \u003c!-- Request legacy Bluetooth permissions on older devices. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH\&quot;\n                     android:maxSdkVersion\u003d\&quot;30\&quot; /\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_ADMIN\&quot;\n                     android:maxSdkVersion\u003d\&quot;30\&quot; /\u003e\n\n    \u003c!-- Needed only if your app looks for Bluetooth devices.\n         If your app doesn\u0027t use Bluetooth scan results to derive physical\n         location information, you can\n         \u003ca href\u003d\&quot;#assert-never-for-location\&quot;\u003estrongly assert that your app\n         doesn\u0027t derive physical location\u003c/a\u003e. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_SCAN\&quot; /\u003e\n\n    \u003c!-- Needed only if your app makes the device discoverable to Bluetooth\n         devices. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_ADVERTISE\&quot; /\u003e\n\n    \u003c!-- Needed only if your app communicates with already-paired Bluetooth\n         devices. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_CONNECT\&quot; /\u003e\n\n    \u003c!-- Needed only if your app uses Bluetooth scan results to derive\n         physical location. --\u003e\n    \u003cuses-permission android:name\u003d\&quot;android.permission.ACCESS_FINE_LOCATION\&quot; /\u003e\n    ...\n\u003c/manifest\u003e\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;Here is a minimal update to add legacy Bluetooth permissions for older devices and other required permissions as suggested. Note that the existing BLUETOOTH_SCAN and BLUETOOTH_CONNECT entries remain unchanged.\n\n```xml:app/src/main/AndroidManifest.xml\n\u003c!-- ... existing code ... --\u003e\n\u003c!-- Request legacy Bluetooth permissions on older devices. --\u003e\n\u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH\&quot; android:maxSdkVersion\u003d\&quot;30\&quot; /\u003e\n\u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_ADMIN\&quot; android:maxSdkVersion\u003d\&quot;30\&quot; /\u003e\n\n\u003c!-- Needed only if your app makes the device discoverable to Bluetooth devices. --\u003e\n\u003cuses-permission android:name\u003d\&quot;android.permission.BLUETOOTH_ADVERTISE\&quot; /\u003e\n\n\u003c!-- Needed only if your app uses Bluetooth scan results to derive physical location. --\u003e\n\u003cuses-permission android:name\u003d\&quot;android.permission.ACCESS_FINE_LOCATION\&quot; /\u003e\n\u003c!-- ... existing code ... --\u003e\n```\n\nExplanation:\n1. Added BLUETOOTH and BLUETOOTH_ADMIN (with maxSdkVersion\u003d\&quot;30\&quot;) for legacy Android versions.\n2. Added BLUETOOTH_ADVERTISE and ACCESS_FINE_LOCATION to cover discoverability and location-based requirements.&quot;}]}" />
      </map>
    </option>
  </component>
</project>